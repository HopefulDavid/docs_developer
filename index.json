{
  "ai/ollama.html": {
    "href": "ai/ollama.html",
    "title": "\uD83E\uDD16 Ollama – Průvodce instalací & správou | Vývojář",
    "summary": "\uD83E\uDD16 Ollama – Průvodce instalací & správou \uD83D\uDE80 Praktické rady pro nastavení, spuštění a správu Ollama na Windows. \uD83C\uDF10 Základní informace Ollama naslouchá na adrese: http://127.0.0.1:11434/ Pro spuštění je nutné spustit soubor ollama app.exe. ⚙️ Změna naslouchací adresy \uD83D\uDD27 Nastavení OLLAMA_HOST Otevřete System variables ve Windows. Přidejte proměnnou prostředí OLLAMA_HOST s požadovanou adresou. Restartujte aplikaci ollama app.exe. Important Změna se projeví až po restartu aplikace. \uD83D\uDED1 Vypnutí automatického spuštění \uD83D\uDEE0️ Jak zakázat autostart Ollama Stiskněte Windows + R. Zadejte shell:startup a potvrďte. Odstraňte zástupce na Ollama ze složky. Note Ollama se ve výchozím stavu spouští při startu počítače. \uD83D\uDCDD Příkazy pro správu modelů \uD83D\uDCE6 Zobrazení nainstalovaných modulů ollama list ⬇️ Stažení modelu ollama run [model] \uD83D\uDDD1️ Odstranění modelu ollama rm [model]"
  },
  "database/Dapper.html": {
    "href": "database/Dapper.html",
    "title": "| Vývojář",
    "summary": "Dapper Kdy použít Note Pro projekty, kde je klíčový výkon nebo kontrola nad databází. Výkon: Maximální výkon, nízká režie Snadnost vývoje: Ruční psaní SQL, více práce Komplexní modely: Ruční správa modelů Flexibilita dotazů: Vysoká – plná kontrola nad SQL Použití Instalace NuGet balíčku: dotnet add package Dapper Konfigurace a použití: using System; using System.Data.SqlClient; using System.Threading.Tasks; using Dapper; // Příklad implementace v aplikační vrstvě public class UserRepository { private readonly string _connectionString; public UserRepository(string connectionString) { _connectionString = connectionString; } // Metoda na získání uživatelů starších než zadaný věk public async Task<IEnumerable<User>> GetUsersOlderThanAsync(int age) { const string sql = \"SELECT Id, Name, Age FROM Users WHERE Age > @Age\"; using (var connection = new SqlConnection(_connectionString)) { return await connection.QueryAsync<User>(sql, new { Age = age }); } } } // Model entity public class User { public int Id { get; set; } public string Name { get; set; } public int Age { get; set; } } // Použití repository ve službě public class UserService { private readonly UserRepository _repository; public UserService(UserRepository repository) { _repository = repository; } public async Task ShowUsersAsync() { var users = await _repository.GetUsersOlderThanAsync(18); foreach (var user in users) { Console.WriteLine($\"ID: {user.Id}, Name: {user.Name}, Age: {user.Age}\"); } } } // Hlavní program class Program { static async Task Main() { var connectionString = \"Server=myServer;Database=myDatabase;User Id=myUser;Password=myPassword;\"; var userRepository = new UserRepository(connectionString); var userService = new UserService(userRepository); await userService.ShowUsersAsync(); } } Note Dapper je v tomo příkladu použit v následující části kódu: using (var connection = new SqlConnection(_connectionString)) { return await connection.QueryAsync<User>(sql, new { Age = age }); }"
  },
  "database/EntityFramework.html": {
    "href": "database/EntityFramework.html",
    "title": "| Vývojář",
    "summary": "Entity Framework Kdy použít Note Pro rychlý vývoj aplikací s menšími nároky na výkon a větší komplexitou modelů. Výkon: Nižší výkon kvůli režii ORM (Object Relation Mapping) Snadnost vývoje: Rychlý vývoj s minimálním SQL Komplexní modely: Automatická správa modelů a migrací Flexibilita dotazů: Omezenější – závisí na EF generátoru Instalace \"C:\\Program Files\\dotnet\\dotnet.exe\" tool install --ignore-failed-sources --global dotnet-ef Note Balíček bude uložen ve složce: C:\\Users\\<TvéUživatelskéJméno>\\.dotnet\\tools Pro zálohu offline, zkopírujte obsah této složky na jiný počítač, kde nástroj dotnet-ef nebude dostupný online. Warning Pokud složku umístíte na jinou cestu, ujistěte se, že ji přidáte do proměnných do PATH, aby byl nástroj dostupný z příkazového řádku. 1. Spusťte build pro zobrazení chyb dotnet build 2. Vytvořte první migraci Important Ujistěte se, že se nacházíte ve složce, kde se nachází váš .csproj soubor dotnet ef migrations add InitialCreate 3. Aktualizujte databázi pomocí migrace dotnet ef database update Použití Instalace NuGet balíčku: dotnet add package Microsoft.EntityFrameworkCore dotnet add package Microsoft.EntityFrameworkCore.SqlServer Konfigurace a použití: using System; using System.Linq; using System.Threading.Tasks; using Microsoft.EntityFrameworkCore; // Model entity public class User { public int Id { get; set; } public string Name { get; set; } public int Age { get; set; } } // DbContext pro správu databáze public class AppDbContext : DbContext { public DbSet<User> Users { get; set; } protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) { optionsBuilder.UseSqlServer(\"Server=myServer;Database=myDatabase;User Id=myUser;Password=myPassword;\"); } } // Služba pro práci s uživateli public class UserService { private readonly AppDbContext _dbContext; public UserService(AppDbContext dbContext) { _dbContext = dbContext; } public async Task ShowUsersAsync() { var users = await _dbContext.Users .Where(u => u.Age > 18) .ToListAsync(); foreach (var user in users) { Console.WriteLine($\"ID: {user.Id}, Name: {user.Name}, Age: {user.Age}\"); } } } // Hlavní program class Program { static async Task Main() { using var dbContext = new AppDbContext(); var userService = new UserService(dbContext); await userService.ShowUsersAsync(); } } Příkazy Příkaz Popis dotnet ef migrations add <Název> Vytvoří nový soubor pro migraci s názvem <Název>, který zachytí změny ve tvých modelech (entitách). dotnet ef migrations remove Smaže poslední migraci, kterou jsi přidal, ale nezmění databázi (pouze vrátí kód zpět). dotnet ef migrations list Zobrazí seznam všech migrací, které jsi vytvořil (ukazuje, jaké změny se postupně prováděly). dotnet ef database update Aplikuje všechny migrace (změny) na databázi, aby se databáze aktualizovala podle aktuálních modelů. dotnet ef database update <Název> Aplikuje migraci s názvem <Název> (pokud nechceš aplikovat všechny migrace). dotnet ef database drop Smaže celou databázi – dávej pozor, tímto příkazem přijdeš o všechna data. dotnet ef dbcontext list Ukáže všechny třídy DbContext ve tvém projektu (DbContext je hlavní třída pro práci s databází). dotnet ef dbcontext info Zobrazí informace o tvojí DbContext třídě (užitečné pro zjištění detailů o konfiguraci). dotnet ef dbcontext scaffold Vytvoří třídy (modely) podle existující databáze – tímto způsobem můžeš začít, pokud už máš databázi. dotnet ef migrations script Vygeneruje SQL skript, který obsahuje všechny změny v migracích – vhodné pro manuální nasazení."
  },
  "database/MSSQL.html": {
    "href": "database/MSSQL.html",
    "title": "\uD83D\uDDC2️ Microsoft SQL – Praktické dotazy & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ Microsoft SQL – Praktické dotazy & tipy \uD83D\uDE80 Moderní přehled SQL dotazů, postupů a tipů pro práci s Microsoft SQL Serverem. \uD83D\uDD0E Získání informací o serveru a databázi \uD83D\uDDA5️ Informace ze serveru SELECT SERVERPROPERTY('MachineName') AS MachineName, SERVERPROPERTY('ServerName') AS ServerName, SERVERPROPERTY('InstanceName') AS InstanceName, SERVERPROPERTY('IsClustered') AS IsClustered, SERVERPROPERTY('Edition') AS Edition, SERVERPROPERTY('ProductVersion') AS ProductVersion, SERVERPROPERTY('ProductLevel') AS ProductLevel, SERVERPROPERTY('ComputerNamePhysicalNetBIOS') AS PhysicalMachineName, CONNECTIONPROPERTY('client_net_address') AS ClientIPAddress \uD83D\uDCCB Informace z tabulky DECLARE @tableName NVARCHAR(128) = N'place_table_name'; SELECT C.TABLE_SCHEMA as 'Namespace', C.TABLE_NAME as 'Název tabulky', C.COLUMN_NAME as 'Název sloupce', C.DATA_TYPE as 'Typ dat', C.IS_NULLABLE as 'Může být NULL ?', T.TABLE_TYPE as 'Typ tabulky' FROM INFORMATION_SCHEMA.COLUMNS C INNER JOIN INFORMATION_SCHEMA.TABLES T ON C.TABLE_NAME = T.TABLE_NAME AND C.TABLE_SCHEMA = T.TABLE_SCHEMA WHERE C.TABLE_NAME = @tableName ORDER BY C.ORDINAL_POSITION; \uD83D\uDCCF Velikost tabulek SELECT t.NAME AS [Název tabulky], s.Name AS [Název schématu], p.rows AS [Počet řádků], CONVERT(NVARCHAR, CAST(SUM(a.total_pages) * 8 / 1024.0 / 1024.0 AS DECIMAL(10, 2))) + ' GB (' + CONVERT(NVARCHAR, CAST((SUM(a.total_pages) * 8 / 1024.0) AS INT)) + ' MB)' AS [Celkový prostor], CONVERT(NVARCHAR, CAST(SUM(a.used_pages) * 8 / 1024.0 / 1024.0 AS DECIMAL(10, 2))) + ' GB (' + CONVERT(NVARCHAR, CAST((SUM(a.used_pages) * 8 / 1024.0) AS INT)) + ' MB)' AS [Využitý prostor], CONVERT(NVARCHAR, CAST((SUM(a.total_pages) - SUM(a.used_pages)) * 8 / 1024.0 / 1024.0 AS DECIMAL(10, 2))) + ' GB (' + CONVERT(NVARCHAR, CAST(((SUM(a.total_pages) - SUM(a.used_pages)) * 8 / 1024.0) AS INT)) + ' MB)' AS [Nevyužitý prostor] FROM sys.tables t INNER JOIN sys.indexes i ON t.OBJECT_ID = i.object_id INNER JOIN sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id INNER JOIN sys.allocation_units a ON p.partition_id = a.container_id LEFT OUTER JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE t.NAME NOT LIKE 'dt%' AND t.is_ms_shipped = 0 AND i.OBJECT_ID > 255 GROUP BY t.Name, s.Name, p.Rows ORDER BY SUM(a.total_pages) * 8 / 1024.0 / 1024.0 DESC; Note Zaokrouhleno na dvě desetinná místa. \uD83D\uDDC2️ Informace o indexech na sloupcích Tip Indexy jsou nejefektivnější, když jsou často čteny a málo aktualizovány. SELECT OBJECT_NAME(s.object_id) AS 'Table', i.name AS 'Index', user_seeks + user_scans + user_lookups AS 'Reads', user_updates AS 'Updates' FROM sys.dm_db_index_usage_stats AS s JOIN sys.indexes AS i ON s.object_id = i.object_id AND i.index_id = s.index_id WHERE OBJECTPROPERTY(s.object_id,'IsUserTable') = 1 ORDER BY 'Reads' DESC, 'Updates' ASC \uD83D\uDD0D Hledání v databázi \uD83D\uDD0E Najít tabulku podle sloupce Komplexní informace: SELECT t.name AS table_name, SCHEMA_NAME(schema_id) AS schema_name, c.name AS column_name FROM sys.tables AS t INNER JOIN sys.columns c ON t.OBJECT_ID = c.OBJECT_ID WHERE c.name LIKE '%ino_doklad%' ORDER BY schema_name, table_name; Základní informace: SELECT TABLE_NAME, COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME LIKE '%place_column_name%' \uD83D\uDD22 Datový typ sloupce z tabulky SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'place_table_name' AND COLUMN_NAME = 'place_column_name' \uD83D\uDD0D Hledat hodnotu ve všech textových a číselných sloupcích Prohledává textové i číselné hodnoty napříč všemi tabulkami a sloupci vybrané databáze. DECLARE @SearchStr nvarchar(100) = 'Doplňte hledanou hodnotu zde!' CREATE TABLE #Results (ColumnName nvarchar(370), ColumnValue nvarchar(3630)) -- ... (zbytek skriptu viz původní soubor) ⏳ Nejnovější a nejstarší záznam SELECT MIN(date_column) as Oldest, MAX(date_column) as Newest FROM table_name; \uD83D\uDCCA Nejčastěji se vyskytující hodnoty SELECT place_column_name, COUNT(*) FROM place_table_name GROUP BY place_column_name ORDER BY COUNT(*) DESC; \uD83D\uDD0C Port na kterém je spuštěn server EXEC xp_readerrorlog 0, 1, N'Server is listening on'; ⚡ Výkon a statistiky \uD83D\uDCC8 Efektivita dotazů SQL Server Management Studio: Menu Query > Include Client Statistics Spusťte dotaz JetBrains: File -> Settings -> Database -> General Zaškrtnout: Show query statistics SET STATISTICS TIME ON; SELECT * FROM place_table -- custom code to execute SET STATISTICS TIME OFF; ⚙️ Konfigurace \uD83C\uDF10 Vzdálený přístup EXEC sp_configure 'remote access'; Note run_value = 1 znamená, že vzdálený přístup je povolen. Pokud je hodnota 0, povolte vzdálený přístup příkazem: EXEC sp_configure 'remote access', 1; RECONFIGURE; \uD83D\uDD17 Spojování tabulek ⬅️ LEFT JOIN Vrátí všechny řádky z první tabulky, druhá tabulka může být `NULL`. ➡️ RIGHT JOIN Vrátí všechny řádky z druhé tabulky, první tabulka může být `NULL`. \uD83D\uDD04 FULL OUTER JOIN Vrátí všechny řádky z obou tabulek, neexistující hodnoty budou `NULL`. \uD83D\uDD17 INNER JOIN Vrátí pouze řádky, které mají odpovídající hodnoty v obou tabulkách. \uD83D\uDD0D CROSS APPLY Umožňuje poddotaz pro každý řádek z první tabulky. \uD83E\uDDF5 Spojování hodnot ze sloupce do řetězce \uD83D\uDD17 STRING_AGG SELECT STRING_AGG(column_name, ';') AS concatenated_values FROM table_name GROUP BY grouping_column Note Spojí hodnoty do jednoho řetězce odděleného středníkem."
  },
  "database/PostgreSQL.html": {
    "href": "database/PostgreSQL.html",
    "title": "\uD83D\uDDC2️ PostgreSQL – Praktický průvodce & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ PostgreSQL – Praktický průvodce & tipy \uD83D\uDE80 Moderní přehled základních pojmů, instalace, příkazů a doporučení pro práci s PostgreSQL. \uD83D\uDCD6 Co je PostgreSQL? Objektově-relační databázový systém Podporuje širokou škálu programovacích jazyků: C, C++, Java, Perl, Python, Ruby, Tcl, Scheme, PHP, Swift, Go, JavaScript, TypeScript, R, Rust, Kotlin, Lua, Erlang, Elixir, Haskell, Scala, D, Julia, PL/pgSQL, SQL, PL/Python, PL/Perl, PL/Tcl, PL/Java, PL/R, PL/V8 Note PL znamená \"Procedural Language\" – umožňuje psaní funkcí a procedur přímo v databázi. \uD83D\uDDA5️ Uživatelské rozhraní \uD83D\uDDA5️ Otevření aplikace \uD83D\uDEE0️ Instalace PostgreSQL \uD83D\uDD22 Výběr verze produktu ▶️ Spuštění instalace Po stažení spusťte instalační soubor: \uD83D\uDCC1 Složka pro instalaci Zvolte umístění PostgreSQL (doporučeno ponechat výchozí): \uD83E\uDDE9 Výběr komponent > [!NOTE] > Doporučuji nainstalovat `pgAdmin 4` (grafické rozhraní) a `Command Line Tools`. \uD83D\uDCBE Složka pro uložení dat Vyberte umístění pro data databáze (doporučeno ponechat výchozí): \uD83D\uDD11 Nastavení hesla Zvolte heslo pro přístup do databáze: \uD83D\uDD0C Port k naslouchání Nastavte port serveru (doporučeno ponechat výchozí): \uD83C\uDF0D Geografické umístění serveru Vyberte lokaci serveru: ✅ Kontrola před instalací Po kontrole dokončete instalaci. \uD83D\uDCBB Příkazový řádek \uD83D\uDD0E Otestovat naslouchání PostgreSQL Otevřete příkazovou konzoli: Připojení k serveru: Výsledek připojení: Warning Pokud nevidíte konzoli v angličtině, upravte: C:\\Program Files\\PostgreSQL\\16\\data\\postgresql.conf > Proměnné prostředí > > Poté restartujte konzoli. Pro ověření připojení spusťte: SELECT version();"
  },
  "database/mongoDB.html": {
    "href": "database/mongoDB.html",
    "title": "\uD83D\uDDC2️ MongoDB – Praktický průvodce & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ MongoDB – Praktický průvodce & tipy \uD83D\uDE80 Moderní přehled základních pojmů, příkazů a doporučení pro práci s MongoDB. \uD83D\uDCD6 Co je MongoDB? Dokumentová databáze NoSQL – nevyužívá tabulkový formát jako SQL databáze Data ukládá ve formátu BSON (binární JSON) Note BSON podporuje více datových typů a je efektivnější při kódování/dekódování než JSON. \uD83E\uDDE9 Klíčové pojmy \uD83D\uDCC4 Dokumenty Záznamy v MongoDB, struktura podobná JSON. \uD83D\uDCDA Kolekce - Ekvivalent tabulky v SQL. - Obsahuje dokumenty, které nemusí mít stejnou strukturu. var document1 = { name: \"Peter\", age: 30, residence: \"Prague\" }; db.myPeople.insert(document1); var document2 = { name: \"Anna\", age: 25, occupation: \"Engineer\" }; db.myPeople.insert(document2); \uD83D\uDDC3️ BSON Binární verze JSON, formát pro ukládání dat v MongoDB. \uD83D\uDEE0️ Základní operace Vytvoření \uD83D\uDDC4️ Databáze use mydb \uD83D\uDCC1 Kolekce mydb.createCollection('mycollection') ➕ Vložit dokument mydb.mycollection.insert({name: 'test'}) ➕ Vložit více dokumentů mydb.mycollection.insertMany([{name: 'test1'}, {name: 'test2'}]) \uD83D\uDD0E Vytvořit index mydb.mycollection.createIndex({name: 1}) Tip 1 = vzestupně, -1 = sestupně \uD83D\uDD0E Vytvoření více indexů mydb.mycollection.createIndexes([{ key: { name: 1 } }, { key: { age: -1 } }]) Hledání \uD83D\uDCCB Výpis databází show dbs \uD83D\uDCC4 Výpis dokumentů mydb.mycollection.find() \uD83D\uDCC1 Výpis kolekcí show collections \uD83D\uDD0D Hledání dokumentu mydb.mycollection.find({name: 'test'}) \uD83D\uDD0D Hledání s určitými poli mydb.mycollection.find({name: 'test'}, {name: 1}) \uD83D\uDD0D Hledání s regulárním výrazem mydb.mycollection.find({name: {$regex: 'te.*'}}) Aktualizace ✏️ Aktualizace dokumentu mydb.mycollection.update({name: 'test'}, {$set: {name: 'newTest'}}) ✏️ Aktualizace více dokumentů mydb.mycollection.updateMany({}, {$set: {name: 'newTest'}}) ✏️ Aktualizace s upsert mydb.mycollection.update({name: 'test'}, {$set: {name: 'newTest'}}, {upsert: true}) Note Upsert = update nebo insert, pokud dokument neexistuje. Smazání \uD83D\uDDD1️ Smazání databáze db.dropDatabase() \uD83D\uDDD1️ Smazání kolekce mydb.mycollection.drop() \uD83D\uDDD1️ Smazání dokumentu mydb.mycollection.remove({name: 'test'}) \uD83D\uDDD1️ Smazání všech dokumentů mydb.mycollection.remove({}) Počet \uD83D\uDD22 Počet dokumentů v kolekci mydb.mycollection.count() \uD83D\uDD22 Počet dokumentů podle dotazu mydb.mycollection.count({name: 'test'}) \uD83D\uDD22 Počet unikátních hodnot mydb.mycollection.distinct('name').length \uD83D\uDD22 Počet podle regulárního výrazu mydb.mycollection.count({name: {$regex: 'te.*'}}) Řazení ↕️ Řazení podle pole mydb.mycollection.find().sort({name: 1}) ↕️ Řazení podle více polí mydb.mycollection.find().sort({name: 1, age: -1}) ↕️ Řazení a limit mydb.mycollection.find().sort({name: 1}).limit(5) ↕️ Řazení a skip mydb.mycollection.find().sort({name: 1}).skip(5)"
  },
  "documentation/doxygen.html": {
    "href": "documentation/doxygen.html",
    "title": "\uD83D\uDDC2️ Doxygen – Praktický průvodce & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ Doxygen – Praktický průvodce & tipy \uD83D\uDE80 Moderní přehled základních pojmů, instalace, konfigurace a doporučení pro práci s Doxygen. \uD83D\uDCD6 Co je Doxygen? Nástroj pro automatické generování dokumentace z komentářů v kódu Podporuje různé jazyky (C, C++, C#, Java, Python, atd.) Umožňuje generovat dokumentaci ve formátech HTML, LaTeX (PDF), RTF, XML Note Doxygen je ideální pro udržení přehledné a strukturované dokumentace ke kódu. \uD83D\uDEE0️ Instalace \uD83D\uDD39 Krok 1: Instalace potřebných nástrojů Nainstalovat Doxygen Stáhněte z doxygen.nl/download.html Ověřte instalaci: doxygen --version Nainstalovat Graphviz (pro diagramy) Stáhněte z Graphviz Download Přidejte cestu ke složce Graphviz/bin do systémové PATH Ověřte instalaci: dot -version Nainstalovat TeX Live nebo MiKTeX (pro PDF) Windows: miktex.org/download Linux: sudo apt install texlive-full Mac: brew install mactex ⚙️ Konfigurace \uD83D\uDD39 Krok 2: Vytvoření konfiguračního souboru Vytvořte Doxyfile v adresáři projektu: doxygen -g Doxyfile Upravte klíčové parametry v Doxyfile: INPUT = ../../ PROJECT_NAME = \"Moje C# dokumentace\" OUTPUT_DIRECTORY = \"docs\" RECURSIVE = YES EXTRACT_ALL = YES GENERATE_LATEX = YES GENERATE_HTML = NO GENERATE_XML = NO HAVE_DOT = YES UML_LOOK = YES DOT_PATH = \"C:/Program Files/Graphviz/bin\" SHOW_USED_FILES = NO SHOW_NAMESPACES = NO DOT_IMAGE_FORMAT = svg Important Tyto parametry ovlivňují generování dokumentace. Další nastavení lze upravit dle potřeby. \uD83D\uDCC4 Generování dokumentace \uD83D\uDD39 Krok 3: Generování výstupních souborů Spusťte Doxygen: doxygen Doxyfile Výstupní složka bude dle OUTPUT_DIRECTORY (např. docs) \uD83D\uDEAB Vynechání private a protected členů Jak vynechat private a protected z dokumentace V souboru Doxyfile nastavte: EXTRACT_PRIVATE = NO ENABLE_PREPROCESSING = YES MACRO_EXPANSION = YES EXPAND_ONLY_PREDEF = YES PREDEFINED = protected=private Tímto způsobem Doxygen vynechá private a protected členy z dokumentace."
  },
  "documentation/pandoc.html": {
    "href": "documentation/pandoc.html",
    "title": "\uD83D\uDDC2️ Pandoc – Praktický průvodce & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ Pandoc – Praktický průvodce & tipy \uD83D\uDE80 Moderní přehled základních pojmů, příkazů a doporučení pro práci s Pandoc. \uD83D\uDCD6 Co je Pandoc? Univerzální konvertor dokumentů Podporuje širokou škálu formátů: Markdown, HTML, LaTeX, DOCX, PDF, EPUB, RTF a další Umožňuje převádět soubory mezi různými značkovacími formáty Note Pandoc je ideální pro automatizaci převodů dokumentů v projektech. \uD83D\uDEE0️ Přehled příkazů \uD83D\uDCCB Tabulka převodů & možností Vstupní Formát Výstupní Formát Příkaz Poznámka Užitečné Možnosti \uD83D\uDCDD Markdown (.md) \uD83D\uDCC4 DOCX (.docx) pandoc soubor.md -o soubor.docx Markdown → Word --standalone, --template=moje-sablona.tex, --metadata title=\"Název dokumentu\" \uD83D\uDCDD Markdown (.md) \uD83C\uDF10 HTML (.html) pandoc soubor.md -o soubor.html Markdown → HTML --self-contained, --css=style.css, --metadata title=\"Titul stránky\" \uD83D\uDCDD Markdown (.md) \uD83D\uDCD1 PDF (.pdf) pandoc soubor.md -o soubor.pdf Markdown → PDF (vyžaduje LaTeX) --pdf-engine=xelatex, --template=moje-sablona.tex, --toc \uD83D\uDCDD Markdown (.md) \uD83D\uDCDA EPUB (.epub) pandoc soubor.md -o soubor.epub Markdown → e-kniha --epub-metadata=metadata.xml, --css=style.css, --epub-cover-image=image.jpg \uD83D\uDCC4 DOCX (.docx) \uD83D\uDCDD Markdown (.md) pandoc soubor.docx -o soubor.md Word → Markdown --extract-media=. \uD83D\uDCC4 DOCX (.docx) \uD83C\uDF10 HTML (.html) pandoc soubor.docx -o soubor.html Word → HTML --self-contained, --css=style.css \uD83D\uDCC4 DOCX (.docx) \uD83D\uDCD1 PDF (.pdf) pandoc soubor.docx -o soubor.pdf Word → PDF --pdf-engine=xelatex, --template=moje-sablona.tex, --toc \uD83D\uDCC4 DOCX (.docx) \uD83D\uDCDA EPUB (.epub) pandoc soubor.docx -o soubor.epub Word → e-kniha --epub-metadata=metadata.xml, --css=style.css \uD83C\uDF10 HTML (.html) \uD83D\uDCDD Markdown (.md) pandoc soubor.html -o soubor.md HTML → Markdown --standalone, --self-contained \uD83C\uDF10 HTML (.html) \uD83D\uDCC4 DOCX (.docx) pandoc soubor.html -o soubor.docx HTML → Word --self-contained, --extract-media=. \uD83C\uDF10 HTML (.html) \uD83D\uDCD1 PDF (.pdf) pandoc soubor.html -o soubor.pdf HTML → PDF --pdf-engine=xelatex, --template=moje-sablona.tex, --toc \uD83C\uDF10 HTML (.html) \uD83D\uDCDA EPUB (.epub) pandoc soubor.html -o soubor.epub HTML → e-kniha --epub-metadata=metadata.xml, --css=style.css \uD83D\uDCD1 LaTeX (.tex) \uD83D\uDCDD Markdown (.md) pandoc soubor.tex -o soubor.md LaTeX → Markdown --standalone, --self-contained \uD83D\uDCD1 LaTeX (.tex) \uD83D\uDCC4 DOCX (.docx) pandoc soubor.tex -o soubor.docx LaTeX → Word --pdf-engine=xelatex, --extract-media=. \uD83D\uDCD1 LaTeX (.tex) \uD83C\uDF10 HTML (.html) pandoc soubor.tex -o soubor.html LaTeX → HTML --self-contained, --standalone \uD83D\uDCD1 LaTeX (.tex) \uD83D\uDCD1 PDF (.pdf) pandoc soubor.tex -o soubor.pdf LaTeX → PDF --pdf-engine=xelatex, --template=moje-sablona.tex, --toc \uD83D\uDCD1 LaTeX (.tex) \uD83D\uDCDA EPUB (.epub) pandoc soubor.tex -o soubor.epub LaTeX → e-kniha --epub-metadata=metadata.xml, --css=style.css \uD83D\uDCDA EPUB (.epub) \uD83D\uDCDD Markdown (.md) pandoc soubor.epub -o soubor.md EPUB → Markdown --standalone, --self-contained \uD83D\uDCDA EPUB (.epub) \uD83D\uDCC4 DOCX (.docx) pandoc soubor.epub -o soubor.docx EPUB → Word --extract-media=. \uD83D\uDCDA EPUB (.epub) \uD83C\uDF10 HTML (.html) pandoc soubor.epub -o soubor.html EPUB → HTML --self-contained, --standalone \uD83D\uDCDA EPUB (.epub) \uD83D\uDCD1 PDF (.pdf) pandoc soubor.epub -o soubor.pdf EPUB → PDF --pdf-engine=xelatex, --template=moje-sablona.tex, --toc \uD83D\uDCC4 RTF (.rtf) \uD83D\uDCDD Markdown (.md) pandoc soubor.rtf -o soubor.md RTF → Markdown --standalone, --self-contained \uD83D\uDCC4 RTF (.rtf) \uD83D\uDCC4 DOCX (.docx) pandoc soubor.rtf -o soubor.docx RTF → Word --extract-media=. \uD83D\uDCC4 RTF (.rtf) \uD83C\uDF10 HTML (.html) pandoc soubor.rtf -o soubor.html RTF → HTML --self-contained, --standalone \uD83D\uDCC4 RTF (.rtf) \uD83D\uDCD1 PDF (.pdf) pandoc soubor.rtf -o soubor.pdf RTF → PDF --pdf-engine=xelatex, --template=moje-sablona.tex, --toc ⚙️ Užitečné možnosti pro konfiguraci výstupů \uD83D\uDD27 Nastavení metadat, šablon a výstupů Nastavení metadat (title, author, date): pandoc soubor.md -o soubor.pdf --metadata title=\"Titul dokumentu\" --metadata author=\"Autor\" Použití vlastní šablony pro PDF/HTML: pandoc soubor.md -o soubor.pdf --template=moje-sablona.tex Generování samostatného souboru pro HTML/PDF (včetně obrázků): pandoc soubor.md -o soubor.html --standalone Přidání obrázků přímo do HTML (base64): pandoc soubor.md -o soubor.html --self-contained Vložení obrázků (s externími cestami): pandoc soubor.md -o soubor.html --extract-media=./media Zobrazení obsahu (TOC): pandoc soubor.md -o soubor.pdf --toc Výběr formátu pro PDF engine (xelatex, pdflatex, etc.): pandoc soubor.md -o soubor.pdf --pdf-engine=xelatex"
  },
  "graphics/affinity.html": {
    "href": "graphics/affinity.html",
    "title": "\uD83D\uDDC2️ Affinity – Praktický průvodce mřížkou & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ Affinity – Praktický průvodce mřížkou & tipy \uD83D\uDE80 Moderní přehled použití mřížky, výpočtů zarovnání a řešení častých problémů v Affinity. \uD83D\uDCD6 Použití mřížky (Grid) \uD83D\uDD39 Zobrazení a nastavení mřížky View → Show Grid – zobrazí mřížku View → Grid and Axis... – nastavení parametrů mřížky \uD83E\uDDEE Výpočet zarovnání obrázku na střed \uD83D\uDCD0 Výpočet pro střed gridu Note Ukázka níže používá tyto hodnoty: gridWidth = 256 px gridHeight = 256 px offsetX = 256 px (posun doprava od původního) ❓ FAQ \uD83D\uDD35 Modrý čtverec uvnitř stránky Je způsoben odsazením (Include margins). \uD83D\uDCDD Řešení Při vytváření nového dokumentu Pro otevřený dokument"
  },
  "ide/components.html": {
    "href": "ide/components.html",
    "title": "\uD83E\uDDE9 Komponenty .NET – Přehled & použití | Vývojář",
    "summary": "\uD83E\uDDE9 Komponenty .NET – Přehled & použití \uD83D\uDE80 Praktické rady pro klíčové komponenty .NET: WCF a WF. \uD83D\uDDC2️ Přehled hlavních komponent \uD83D\uDD17 Windows Communication Foundation (WCF) Výměna dat mezi aplikacemi nebo službami na různých platformách. Podpora protokolů: HTTP, TCP, Named Pipes, MSMQ. Umožňuje vytvářet webové služby (SOAP, REST, JSON). Vhodné pro microservices a scénáře s více standardy. Tip Použijte WCF, pokud potřebujete robustní komunikaci mezi různými systémy. \uD83D\uDD04 Windows Workflow Foundation (WF) Automatizace složitých procesů a pracovních postupů. Vizuální návrh workflow pomocí diagramů. Flexibilní modelování a snadná změna logiky. Vhodné pro schvalování, řízení procesů, opakující se úlohy. Tip WF je ideální pro automatizaci firemních procesů s více kroky a podmínkami."
  },
  "ide/jetBrains.html": {
    "href": "ide/jetBrains.html",
    "title": "\uD83E\uDDD1‍\uD83D\uDCBB JetBrains Rider – Tipy, propojení & nástroje | Vývojář",
    "summary": "\uD83E\uDDD1‍\uD83D\uDCBB JetBrains Rider – Tipy, propojení & nástroje \uD83D\uDE80 Praktické rady pro efektivní práci v JetBrains Rider, propojení s Androidem, XML komentáře, klávesové zkratky a regulární výrazy. \uD83D\uDCF1 Propojení s mobilním zařízením (Android) \uD83D\uDD17 Kompletní postup propojení Nastavení BIOSu (AMD CPU) Otevřete BIOS → najděte konfiguraci CPU → nastavte SVM na Enabled. Správa Android SDK v Rideru Otevřete: File → Project Structure → SDKs → Project → nastavte Android SDK. SDK lze stáhnout v Android Studio → More Actions → SDK Manager. Ověření základních komponent SDK V sekci SDK Tools zkontrolujte: | Komponenta | Popis | |------------|-------| | Android SDK Built-Tools | Sestavení aplikací | | Android SDK Command-Line Tools | Správa SDK | | Android Emulator | Testování aplikací | | Android Emulator hypervisor driver | Výkon emulátoru (Intel/AMD) | | Android SDK Platform-Tools | Komunikace s zařízeními (adb) | Nastavení AVD (Android Virtual Device) Přidejte do proměnné prostředí: C:\\Users\\<YourUsername>\\AppData\\Local\\Android\\Sdk\\platform-tools ADB umožňuje komunikaci mezi PC a Androidem. \uD83D\uDCCB Zkontrolovat status emulátorů adb devices \uD83D\uDD04 Restart ADB služby adb kill-server adb start-server Propojení s mobilním zařízením Otevřete Android Studio → More Actions → Virtual Device Manager. Vytvořte nové virtuální zařízení a spusťte jej. V Rideru vyberte zařízení a spusťte aplikaci. \uD83D\uDCDD XML komentáře \uD83D\uDCAC Zalomení řádku v XML komentáři Použijte: <para>&#160;</para> Warning <para></para> a <br/> nefungují pro zalomení řádku. Příklad: /// <summary> /// This sentence shows up when the type is hovered /// <para>&#160;</para> /// <para>int PrimaryKey</para> /// <para>&#160;</para> /// <para>virtual Relation Relation</para> /// </summary> Více info: XML zalomení komentáře ⌨️ Klávesové zkratky \uD83D\uDD24 Parametry metody Zobrazení informací o parametrech: Ctrl + Shift + Space \uD83D\uDD04 Procházení seznamu Vpřed: Ctrl + Shift + Space Zpět: Ctrl + Shift + P \uD83D\uDD0D Regulární výrazy \uD83D\uDCA1 Použití proměnné v regexu \uD83D\uDD22 Číselná proměnná Vyhledání proměnné v textu: <h2>(.*?)</h2> Nahrazení proměnné v textu: <h2>Test $1</h2> \uD83C\uDFF7️ Pojmenovaná proměnná Vyhledání proměnné v textu: <h2>(?<customName>.*?)</h2> Nahrazení proměnné v textu: <h2>Test ${customName}</h2>"
  },
  "ide/visualStudio.html": {
    "href": "ide/visualStudio.html",
    "title": "\uD83D\uDDA5️ Visual Studio – Offline instalace & tipy | Vývojář",
    "summary": "\uD83D\uDDA5️ Visual Studio – Offline instalace & tipy \uD83D\uDE80 Praktické rady pro stažení a instalaci Visual Studio Community offline. \uD83D\uDCE5 Stažení instalátoru pro offline použití \uD83D\uDD3D Kompletní postup stažení Stáhněte instalátor Získejte vs_community.exe z oficiálních stránek Visual Studio. Přesuňte se do složky s instalátorem Například: C:\\Users\\<VašeJméno>\\Stažené\\ Otevřete příkazový řádek Spusťte cmd jako správce. Spusťte příkaz pro offline stažení: vs_community.exe --layout C:\\visualstudio_offline --lang cs-CZ en-US --all --layout určuje cílovou složku pro instalační soubory. --lang nastavuje jazyky (čeština, angličtina). --all stáhne všechny dostupné komponenty včetně volitelných modulů. Note Po dokončení se vytvoří složka visualstudio_offline s kompletními instalačními soubory."
  },
  "index.html": {
    "href": "index.html",
    "title": "| Vývojář",
    "summary": "Změny 2025-09-25 výrazné zlepšení dokumentace a její zjednodušení 2025-08-21 ✨ Nové funkcionality: přidání dokumentace pro nastavení a přístup v XAMPP. 2025-05-19 \uD83D\uDCDA Změny v dokumentaci: aktualizace příkazů pro správu služby Winnat (docker) 2025-05-14 \uD83D\uDCDA Změny v dokumentaci: aktualizace názvů v obsahu dokumentace (docker) \uD83D\uDCDA Změny v dokumentaci: přidána nová sekce s postupem pro řešení problémů s nedostupnými porty v Dockeru. (docker) \uD83D\uDCDA Změny v dokumentaci: přidání dokumentace pro Busybox (docker) 2025-05-13 \uD83D\uDCDA Změny v dokumentaci: přidání sekcí pro zobrazení běžících kontejnerů a aktualizaci nastavení automatického spouštění kontejneru. 2025-05-10 ✨ Nové funkcionality: přidána nová dokumentace pro nastavení Duplicati a spuštění Portaineru v Dockeru. (docs) \uD83D\uDCDA Změny v dokumentaci: přidání sekce pro propojení složky z Windows s kontejnerem v dockeru 2025-05-02 \uD83D\uDCDA Změny v dokumentaci: kdy použít Pull Request a kdy použít git merge. (Git) \uD83D\uDCDA Změny v dokumentaci: postupy pro vytváření a mazání vzdálených větví v Gitu. (Git) \uD83D\uDCDA Změny v dokumentaci: přidání použití funkce STRING_AGG pro spojování hodnot ze sloupce do řetězce. (MSSQL) \uD83C\uDFA8 Změny formátování: upravení formátování SQL dotazů v dokumentaci (MSSQL) 2025-04-17 \uD83D\uDC1B Opravy chyb: opraven graf závyslostí (Clean Architecture) 2025-04-16 \uD83D\uDCDA Změny v dokumentaci: aktualizace průvodce Clean Architecture (Clean Architecture) 2025-04-14 Vyčištění změn"
  },
  "network/ssh.html": {
    "href": "network/ssh.html",
    "title": "\uD83D\uDDC2️ SSH & GitHub – Praktický průvodce & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ SSH & GitHub – Praktický průvodce & tipy \uD83D\uDE80 Moderní přehled nastavení SSH klíče, připojení ke GitHubu a správy URL repozitářů. \uD83D\uDCD6 Co je SSH? Bezpečný protokol pro vzdálené připojení Využívá veřejný a soukromý klíč místo hesla Zvyšuje bezpečnost při práci s GitHubem Note SSH je bezpečnější než používání uživatelského jména a hesla. \uD83D\uDEE0️ Krok 1: Generování SSH klíče \uD83D\uDD11 Vytvoření nového SSH klíče ssh-keygen -t rsa -b 4096 -C \"<your_email@example.com>\" Zadejte umístění pro uložení klíče (obvykle ~/.ssh/id_rsa) Volitelně nastavte heslo pro klíč Tip Pokud již máte SSH klíč, tento krok přeskočte. \uD83D\uDEE0️ Krok 2: Přidání SSH klíče do GitHubu \uD83D\uDCCB Zkopírování veřejného klíče Windows: type %userprofile%\\.ssh\\id_rsa.pub Linux/macOS: cat ~/.ssh/id_rsa.pub \uD83D\uDD17 Přidání klíče na GitHub Přihlaste se na GitHub Otevřete Settings → SSH and GPG keys Klikněte na New SSH key Vložte obsah veřejného klíče Potvrďte kliknutím na Add SSH key \uD83D\uDEE0️ Krok 3: Testování SSH připojení \uD83E\uDDEA Ověření funkčnosti ssh -T git@github.com Pokud je vše správně nastaveno, zobrazí se zpráva: Hi username! You've successfully authenticated, but GitHub does not provide shell access. \uD83D\uDEE0️ Krok 4: Klonování repozitáře pomocí SSH \uD83D\uDCE6 Klonování bez hesla git clone git@github.com:username/repository.git \uD83D\uDEE0️ Krok 5: Nastavení SSH URL pro existující repozitář \uD83D\uDD04 Změna URL z HTTPS na SSH git remote set-url origin git@github.com:username/repository.git Tip Pokud nastavíte špatně URL, můžete ji znovu upravit stejným příkazem. Zobrazení aktuálních URL pro fetch a push git remote -v Nastavení odlišné URL pro fetch a push Nastavit URL pro fetch: git remote set-url origin <fetch-url> Nastavit URL pro push: git remote set-url origin https://github.com/username/repo.git Zkontrolovat nastavení: git remote -v"
  },
  "network/vpn.html": {
    "href": "network/vpn.html",
    "title": "\uD83D\uDDC2️ VPN – Praktický průvodce & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ VPN – Praktický průvodce & tipy \uD83D\uDE80 Moderní přehled fungování VPN, výhod, příkladů použití a bezpečnostních doporučení. \uD83D\uDCD6 Co je VPN? Virtual Private Network – technologie pro zabezpečené a šifrované připojení přes internet. Chrání vaše data, identitu a umožňuje bezpečný vzdálený přístup. Umožňuje maskovat IP adresu a obcházet regionální omezení. Note VPN je klíčová pro bezpečnou práci na veřejných sítích i pro firemní přístup. \uD83D\uDEE0️ Jak VPN funguje \uD83D\uDD12 Šifrování dat Vaše data jsou při připojení k VPN zašifrována, takže jsou nečitelná pro třetí strany. \uD83D\uDEE4️ Tunelování Data procházejí zabezpečeným tunelem, který chrání komunikaci před hackery a poskytovateli internetu. \uD83D\uDD75️‍♂️ Maskování IP adresy VPN server vám přidělí novou IP adresu, čímž skryje vaši skutečnou identitu a polohu. \uD83C\uDF0D Řízení přístupu VPN umožňuje přístup k obsahu omezenému na konkrétní regiony tím, že se jevíte jako uživatel z jiného místa. \uD83D\uDCDD Příklad použití VPN ve firemní síti \uD83C\uDFE2 Zabezpečení dat S VPN: Data jsou šifrována a chráněna před neoprávněným přístupem. Bez VPN: Data nejsou šifrována, hrozí jejich zachycení a zneužití. \uD83D\uDD17 Přístup k firemním zdrojům S VPN: Bezpečný vzdálený přístup k interním serverům, databázím a aplikacím. Bez VPN: Přístup je omezený nebo nemožný, pokud nejsou zdroje veřejně dostupné. \uD83D\uDD75️‍♀️ Maskování IP adresy S VPN: Nová IP adresa chrání identitu a polohu. Bez VPN: Skutečná IP je viditelná, což zvyšuje riziko sledování. \uD83D\uDEE4️ Tunelování komunikace S VPN: Data procházejí zabezpečeným tunelem, chráněna před poskytovateli internetu. Bez VPN: Data jsou vystavena riziku zachycení a analýzy."
  },
  "network/wireshark.html": {
    "href": "network/wireshark.html",
    "title": "\uD83D\uDDC2️ Wireshark – Dešifrování HTTPS (SSL/TLS) & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ Wireshark – Dešifrování HTTPS (SSL/TLS) & tipy \uD83D\uDE80 Moderní průvodce nastavením dešifrování SSL/TLS provozu ve Wiresharku. \uD83D\uDCD6 Co je dešifrování HTTPS? Umožňuje analyzovat šifrovaný provoz mezi klientem a serverem. Využívá soubor s klíči pro dešifrování paketů v reálném čase. Klíčové pro ladění, bezpečnostní analýzu a vývoj webových aplikací. Note Pro dešifrování je nutné mít přístup k Pre-Master Secret klíčům. \uD83D\uDEE0️ Krok 1: Nastavení proměnné SSLKEYLOGFILE \uD83D\uDD11 Vytvoření souboru s klíči Nastavte systémovou proměnnou prostředí s názvem SSLKEYLOGFILE na cestu k souboru, kam bude prohlížeč ukládat klíče. Windows: Otevřete Ovládací panely → Systém → Upřesnit nastavení systému → Proměnné prostředí. Příklad cesty: C:\\Users\\<uživatel>\\sslkeys.log Restartujte prohlížeč, aby začal klíče zapisovat. Tip Podporují Chrome, Firefox, Edge. Safari a IE nikoliv. \uD83D\uDEE0️ Krok 2: Konfigurace Wiresharku ⚙️ Nastavení dešifrování TLS Otevřete Wireshark Jděte do Edit → Preferences → Protocols → TLS Nastavte Pre-Master-Secret log filename na stejnou cestu jako SSLKEYLOGFILE Note Po nastavení Wireshark automaticky použije klíče k dešifrování provozu. \uD83D\uDEE0️ Krok 3: Zachycení a analýza paketů \uD83D\uDCE6 Zachycení dešifrovaného provozu Spusťte zachytávání paketů ve Wiresharku Proveďte požadovanou komunikaci v prohlížeči Po ukončení zachytávání byste měli vidět dešifrovaný HTTP provoz Tip Filtrujte protokol http nebo tls pro lepší přehlednost."
  },
  "operatingSystem/windows.html": {
    "href": "operatingSystem/windows.html",
    "title": "\uD83D\uDDC2️ Windows – Praktický průvodce & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ Windows – Praktický průvodce & tipy \uD83D\uDE80 Moderní přehled instalace, nastavení, klávesových zkratek a řešení problémů ve Windows. \uD83D\uDEE0️ Instalace Windows & řešení neviditelného disku \uD83D\uDCBE Řešení problému s neviditelným diskem při instalaci Stáhněte si ovladač pro diskovou jednotku Otevřete příkazový řádek: Shift + F10 Zobrazte informace o discích: wmic diskdrive list brief Pokud používáte Intel RST (RAID) nebo Intel Optane, stáhněte odpovídající ovladač: Intel RST VMD Managed Controller / Intel RST VMD Controller pro RAID/NVMe/SATA Intel Optane Memory and Storage Management pro Optane Ovladač rozbalte na USB disk. Načtení ovladače během instalace Spusťte instalaci Windows. Na obrazovce s výběrem disků klikněte na Načíst ovladač (Load Driver). Vložte USB disk s ovladačem a vyberte správný soubor. Novější verzi poznáte podle vyššího hexadecimálního čísla v názvu (např. 09AB je novější než 08AB). Important Po načtení ovladače by měl být disk viditelný a připravený pro instalaci. ⚙️ Základní nastavení ⏱️ Zobrazení sekund v dolním panelu ⌨️ Klávesnicové zkratky \uD83D\uDDD4 Minimalizace/Maximalizace všech oken Win + D \uD83D\uDD17 Skočení na adresní řádek Alt + D \uD83D\uDDB1️ Chybějící klávesy na klávesnici \uD83D\uDDC2️ Kontextová klávesa Řešení: Shift + F10"
  },
  "operatingSystem/windows/cmd.html": {
    "href": "operatingSystem/windows/cmd.html",
    "title": "\uD83D\uDDC2️ Windows CMD & optimalizace – Praktický průvodce & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ Windows CMD & optimalizace – Praktický průvodce & tipy \uD83D\uDE80 Moderní přehled práce s příkazovým řádkem, dávkovými skripty a optimalizací disků ve Windows. \uD83D\uDCD6 Příkazový řádek & dávkové skripty Batch skript má příponu .bat nebo .cmd. Umožňuje automatizovat úlohy ve Windows. \uD83D\uDEE0️ Spouštění SQL skriptů ze složky \uD83D\uDCC2 Hromadné spuštění všech SQL skriptů for %%G in (*.sql) do sqlcmd /S serverTest /d CT46 -U userName -P password123 -i\"%%G\" pause Note Smyčka for %%G in (*.sql) projde všechny .sql soubory v adresáři a spustí je pomocí sqlcmd na zadaném SQL serveru. pause umožní zobrazit výsledek před zavřením okna. \uD83D\uDEE0️ Optimalizace disků ve Windows \uD83D\uDCBE Automatická optimalizace SSD & HDD Note Windows 10+ automaticky spouští TRIM na SSD jednou týdně. U HDD je doporučena defragmentace jednou měsíčně. defrag C: D: /O \uD83D\uDD0D Rozbor příkazu: defrag – Spustí optimalizaci disků. C: D: – Vybere disky C: (SSD) a D: (HDD). /O – Automaticky použije správnou metodu (TRIM pro SSD, defragmentaci pro HDD). \uD83D\uDCDD Co se stane po spuštění? 1️⃣ SSD (C:) Spustí se TRIM, který vymaže nepoužívané bloky a zlepší výkon SSD. 2️⃣ HDD (D:) Spustí se defragmentace, která přesune roztříštěné soubory a zrychlí čtení dat."
  },
  "operatingSystem/windows/powerShell.html": {
    "href": "operatingSystem/windows/powerShell.html",
    "title": "\uD83D\uDDC2️ PowerShell – Praktický průvodce & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ PowerShell – Praktický průvodce & tipy \uD83D\uDE80 Moderní přehled instalace, nastavení, správy balíčků, oprávnění, práce se soubory a sítě v PowerShellu. \uD83D\uDCE6 Správa balíčků \uD83D\uDCC1 Umístění modulů Windows: C:\\Users\\{xxx}\\Documents\\PowerShell\\Modules \uD83C\uDFA8 Změna designu PowerShellu \uD83D\uDD8C️ Modernizace vzhledu Původní vzhled: Nový vzhled: \uD83D\uDEE0️ Postup modernizace Instalace PowerShell 7+ Zjistěte verzi: $PSVersionTable Stáhnout PowerShell Instalace Windows Terminal Stáhnout Windows Terminal Spusťte PowerShell jako administrátor Nastavte oprávnění na Bypass Set-ExecutionPolicy -Scope CurrentUser Bypass Rozdělte okno na části Klávesová zkratka: Alt + Left Click Instalace modulů Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://ohmyposh.dev/install.ps1')) Install-Module posh-git Změna vzhledu příkazové řádky oh-my-posh init pwsh --config 'C:\\Users\\{xxx}\\Themes\\PowerShell\\aliens.omp.json' | Invoke-Expression Import modulu Import-Module posh-git Nastavení trvalého vzhledu Zjistěte cestu k profilu: $PROFILE Otevřete nebo vytvořte soubor: notepad $PROFILE Vložte: Import-Module posh-git oh-my-posh init pwsh --config 'C:\\Users\\{xxx}\\themes\\aliens.omp.json' | Invoke-Expression Nastavte oprávnění na RemoteSigned Set-ExecutionPolicy -Scope CurrentUser RemoteSigned Vypněte administrátorský režim \uD83C\uDFAD Nastavení vzhledů (themes) \uD83C\uDFA8 Výběr a změna vzhledu Navigujte do složky s tématy: C:\\Users\\{xxx}\\themes\\ Zobrazte dostupné vzhledy: Get-PoshThemes Změna vzhledu v profilu: Import-Module posh-git oh-my-posh init pwsh --config 'C:\\Users\\{xxx}\\Documents\\themes\\catppuccin.omp.json' | Invoke-Expression Šablony ke stažení \uD83D\uDD51 Historie příkazů \uD83D\uDCDC Umístění historie (Get-PSReadlineOption).HistorySavePath \uD83D\uDD10 Oprávnění \uD83D\uDD0E Zjištění oprávnění Get-ExecutionPolicy -Scope CurrentUser Restricted – Skripty nejsou povoleny AllSigned – Pouze podepsané skripty RemoteSigned – Skripty z internetu musí být podepsané Unrestricted – Všechny skripty povoleny Undefined – Výchozí nastavení podle typu systému ⚙️ Nastavení oprávnění Set-ExecutionPolicy -Scope CurrentUser Bypass AllSigned, Bypass, Default, RemoteSigned, Restricted, Undefined, Unrestricted Více info \uD83D\uDE80 Spuštění skriptu bez změny oprávnění powershell -ExecutionPolicy Bypass -File \"C:\\{xxx}\\Downloads\\WSL-Offline-Install.ps1\" \uD83D\uDCC1 Práce se soubory \uD83D\uDD52 Změna metadat souboru Změna času posledního zápisu: (Get-Item \"C:\\Users\\{xxx}\\FileA.docx\").LastWriteTime = \"2024.10.10 17:00:00\" Úprava celkového času v dokumentu Word: Přejmenujte .docx na .zip Rozbalte soubor V souboru docProps/app.xml upravte <TotalTime> Zazipujte zpět a změňte příponu na .docx \uD83D\uDCCB Kopírování souborů Kopírování ze zdroje: xcopy /y /z \"\\\\192.xxx.xx.xx\\files\\module.xml\" \"C:\\Users\\Test\\Downloads\\*\" Kopírování do podsložek: for /D %%G in (\"C:\\Users\\Test\\Downloads\\*\") DO (xcopy /y /z \"C:\\Users\\Test\\Downloads\\module.xml\" \"%%G\\SubDirectory\\*\") Přidejte pause pro zobrazení výsledků. \uD83C\uDF10 Síť \uD83D\uDD0D Získání názvu hostitele Resolve-DnsName -Name <IP adresa> -Type PTR \uD83C\uDF10 Získání síťových adaptérů Všechny: Get-NetAdapter -physical Aktivní: Get-NetAdapter -physical | where status -eq 'up'"
  },
  "programming/appcast.html": {
    "href": "programming/appcast.html",
    "title": "\uD83D\uDCF0 Appcast Feed XML | Vývojář",
    "summary": "\uD83D\uDCF0 Appcast Feed XML \uD83D\uDE80 Appcast je RSS feed ve formátu XML pro distribuci aktualizací aplikací pomocí technologie Sparkle. \uD83E\uDDE9 Hlavní komponenty \uD83C\uDFF7️ Element \uD83D\uDCA1 Popis <rss> Kořenový element, verze a namespace. <channel> Hlavní sekce feedu, metadata kanálu aktualizací. <item> Jednotlivý záznam pro jednu verzi aplikace. \uD83D\uDCE6 Struktura feedu \uD83D\uDD0D Příklad feedu <?xml version=\"1.0\" encoding=\"utf-8\"?> <rss version=\"2.0\" xmlns:sparkle=\"http://www.andymatuschak.org/xml-namespaces/sparkle\"> <channel> <title>Aktualizace pro MyApp</title> <link>https://example.com/updates.xml</link> <description>Aktualizace pro aplikaci MyApp</description> <pubDate>Thu, 18 Jan 2025 10:00:00 +0000</pubDate> <language>cs-cz</language> <item> <title>Verze 1.0</title> <link>https://example.com/release/1.0</link> <description>První verze aplikace MyApp.</description> <pubDate>Fri, 17 Jan 2025 10:00:00 +0000</pubDate> <enclosure url=\"https://example.com/files/MyApp-1.0.zip\" sparkle:version=\"1.0\" length=\"102400\" type=\"application/octet-stream\"/> </item> </channel> </rss> \uD83C\uDFF7️ <rss> – Kořenový element \uD83D\uDCD6 Detaily & příklad ⚙️ Atribut \uD83D\uDCA1 Popis version Verze RSS specifikace, obvykle 2.0. xmlns:sparkle Namespace pro Sparkle, např. http://www.andymatuschak.org/xml-namespaces/sparkle. <rss version=\"2.0\" xmlns:sparkle=\"http://www.andymatuschak.org/xml-namespaces/sparkle\"> <!-- ... --> </rss> \uD83D\uDCE1 <channel> – Metadata kanálu \uD83D\uDCCB Elementy & atributy \uD83C\uDFF7️ Element \uD83D\uDCA1 Popis ⚙️ Atributy / Vnořené elementy <title> Název kanálu — <link> URL adresa feedu — <description> Stručný popis kanálu — <language> Jazyk feedu — <copyright> Informace o autorských právech — <managingEditor> Email správce kanálu — <webMaster> Email webového správce — <pubDate> Datum vydání kanálu — <lastBuildDate> Datum poslední aktualizace — <category> Kategorie kanálu — <generator> Software použitý k vytvoření kanálu — <docs> URL adresa specifikace RSS — <cloud> Specifikace pro cloudové služby domain, port, path, registerProcedure, protocol <ttl> Čas cache v minutách — <image> Logo/obrázek kanálu url, title, link <textInput> Formulář pro zadávání textu title, description, name, link <skipHours> Hodiny bez aktualizací hour <skipDays> Dny bez aktualizací day \uD83D\uDCDD <item> – Jednotlivá aktualizace \uD83D\uDCCB Elementy & atributy \uD83C\uDFF7️ Element \uD83D\uDCA1 Popis ⚙️ Atributy / Vnořené elementy <title> Název položky — <link> URL adresa položky — <description> Stručný popis položky — <author> Email autora — <category> Kategorie položky — <comments> URL komentářů — <enclosure> Mediální objekt (instalační balíček) url, length, type, sparkle:version <guid> Jedinečný identifikátor položky — <pubDate> Datum publikace — <source> RSS kanál původu — <sparkle:tags> Sparkle tagy (kritická aktualizace, min/max OS, poznámky k vydání) vnořené elementy \uD83E\uDDE9 Delta aktualizace ⚠️ Delta soubory obsahují pouze rozdíly mezi verzemi aplikace a šetří šířku pásma. \uD83E\uDDEA Příklad delta aktualizace <item> <title>Verze 3.0</title> <description>Delta aktualizace pro přechod z verze 2.0.</description> <pubDate>Wed, 23 Jan 2025 10:00:00 +0000</pubDate> <enclosure url=\"https://example.com/files/MyApp-3.0.zip\" sparkle:version=\"3.0\" length=\"512000\" type=\"application/octet-stream\"/> <sparkle:deltas> <enclosure url=\"https://example.com/files/3.0_from_2.0.patch\" sparkle:version=\"3.0\" sparkle:deltaFrom=\"2.0\" length=\"51200\" type=\"application/octet-stream\"/> <enclosure url=\"https://example.com/files/3.0_from_2.1.patch\" sparkle:version=\"3.0\" sparkle:deltaFrom=\"2.1\" length=\"51200\" type=\"application/octet-stream\"/> </sparkle:deltas> </item>"
  },
  "programming/developmentPatterns.html": {
    "href": "programming/developmentPatterns.html",
    "title": "\uD83E\uDDE9 Vývojové vzory – Kompletní přehled & použití | Vývojář",
    "summary": "\uD83E\uDDE9 Vývojové vzory – Kompletní přehled & použití \uD83D\uDE80 Praktické rady pro opakovaně použitelné návrhové vzory v softwarovém vývoji. \uD83D\uDCDA Co jsou vývojové vzory? \uD83D\uDD0D Definice & význam Vývojové vzory jsou osvědčená řešení opakujících se problémů v návrhu softwaru. Zlepšují čitelnost, údržbu a rozšiřitelnost kódu. Vzory nejsou konkrétní kód, ale obecné postupy a struktury. \uD83D\uDDC2️ Klasifikace návrhových vzorů \uD83E\uDDE9 Přehled kategorií Typ vzoru Popis Příklad použití Creational Vytváření objektů Singleton, Factory, Builder, Prototype, Abstract Factory Structural Skládání objektů a tříd Adapter, Decorator, Facade, Composite, Bridge, Proxy, Flyweight Behavioral Komunikace a chování objektů Observer, Strategy, Command, State, Chain of Responsibility, Mediator, Memento, Iterator, Template Method, Visitor, Interpreter \uD83D\uDCDD Ukázky hlavních vzorů \uD83D\uDD27 Creational vzory Vzor Popis Ukázka (JavaScript) Singleton Jediná instance třídy class Singleton { ... } Factory Method Vytváření objektů přes tovární metodu class CarFactory { ... } Abstract Factory Vytváření rodin objektů class GUIFactory { ... } Builder Složené vytváření objektů class CarBuilder { ... } Prototype Klonování existujícího objektu const clone = Object.create(proto); \uD83C\uDFD7️ Structural vzory Vzor Popis Ukázka (JavaScript) Adapter Přizpůsobení rozhraní class NewApiAdapter { ... } Decorator Přidání funkcionality function decorate(obj) { ... } Facade Zjednodušené rozhraní pro složitý systém class Facade { ... } Composite Skládání objektů do stromu class Component { ... } Bridge Oddělení abstrakce od implementace class Bridge { ... } Proxy Zástupce objektu class Proxy { ... } Flyweight Sdílení dat mezi objekty class FlyweightFactory { ... } \uD83E\uDD1D Behavioral vzory Vzor Popis Ukázka (JavaScript) Observer Sledování změn objektu class Subject { ... } Strategy Zaměnitelné algoritmy class Strategy { ... } Command Zapouzdření požadavku jako objektu class Command { ... } State Změna chování podle stavu class State { ... } Chain of Responsibility Řetězení zpracovatelů class Handler { ... } Mediator Zprostředkování komunikace class Mediator { ... } Memento Uložení a obnovení stavu class Memento { ... } Iterator Procházení kolekcí class Iterator { ... } Template Method Definice kostry algoritmu class Template { ... } Visitor Přidání operací objektům class Visitor { ... } Interpreter Interpretace jazyků class Interpreter { ... } \uD83D\uDCC4 Ukázky implementace \uD83D\uDD27 Singleton class Singleton { static instance; constructor() { if (!Singleton.instance) { Singleton.instance = this; } return Singleton.instance; } } \uD83C\uDFED Factory Method class CarFactory { createCar(type) { if (type === 'electric') return new ElectricCar(); if (type === 'diesel') return new DieselCar(); } } \uD83C\uDFAD Adapter class OldApi { getData() { return 'old data'; } } class NewApiAdapter { constructor(oldApi) { this.oldApi = oldApi; } fetch() { return this.oldApi.getData(); } } \uD83D\uDC40 Observer class Subject { constructor() { this.observers = []; } subscribe(obs) { this.observers.push(obs); } notify(data) { this.observers.forEach(o => o.update(data)); } } \uD83D\uDCC4 Další zdroje \uD83D\uDCC4 Dokument vývojových vzorů (PDF) \uD83D\uDCA1 Design Patterns – Refactoring Guru \uD83D\uDCDD Přehled vzorů v JavaScriptu"
  },
  "programming/flutter/backupAndRestore.html": {
    "href": "programming/flutter/backupAndRestore.html",
    "title": "| Vývojář",
    "summary": "Záloha, obnova a ukládání dat Umístění aplikačních dat shared_preferences.json: %APPDATA%\\com.example\\xxx_app %APPDATA% – uživatelská data (C:\\Users\\<uživatel>\\AppData\\Roaming) com.example – identifikátor aplikace xxx_app – název aplikace shared_preferences.json – uložená data Záloha závislostí Zálohujte složku .pub-cache: Windows: C:\\Users\\<uživatelské_jméno>\\AppData\\Local\\Pub\\Cache macOS/Linux: /Users/<uživatelské_jméno>/.pub-cache hosted – balíčky z repozitářů (pub.dev) hosted-hashes – hash soubory pro ověření integrity temp – dočasné soubory při stahování balíčků Obnova závislostí Obnovte obsah složky .pub-cache do původního umístění."
  },
  "programming/flutter/basics.html": {
    "href": "programming/flutter/basics.html",
    "title": "| Vývojář",
    "summary": "Základní znalosti Co je Riverpod? Riverpod je knihovna pro správu stavu ve Flutteru. Pomáhá jednoduše sdílet data (např. uživatele, nastavení, seznamy) mezi různými částmi aplikace. Místo toho, abys data tahal ručně, použiješ tzv. provider a data si \"vytáhneš\" kdekoliv v aplikaci. Příklad: Chci vědět, kdo je přihlášený uživatel. Vytvořím provider a pak ho použiju v jakémkoliv widgetu. 1. Co je StatelessWidget? Neumí si nic pamatovat. Jen zobrazí UI podle vstupních dat. Nepoužívá žádný vnitřní stav, žádné změny, žádné reakce na události. Použití: Když potřebuješ jen vykreslit něco jednoduchého, co se nemění. 2. Co je StatefulWidget? Umí si pamatovat stav. Může reagovat na změny, ukládat si data, spouštět kód při startu (initState) a při zavření (dispose). Hodí se, když potřebuješ např. načítat data, čekat na odpověď, reagovat na kliknutí, animace apod. Použití: Když stránka potřebuje něco sledovat, měnit, nebo reagovat na události. 3. Co je ConsumerWidget? Speciální typ StatelessWidgetu pro Riverpod. Umožňuje jednoduše číst data z providerů (Riverpod). Nemá vlastní stav, ale umí reagovat na změny v datech z provideru. Použití: Když chceš zobrazit data z Riverpod provideru, ale nepotřebuješ vlastní stav. Kdy použít co? StatelessWidget – jednoduché zobrazení, žádný stav, žádné změny. StatefulWidget – složitější logika, potřeba pamatovat si stav, reagovat na změny, používat initState/dispose. ConsumerWidget – jednoduché zobrazení dat z Riverpod provideru, bez vlastního stavu. Proč není všude ConsumerWidget? ConsumerWidget neumí mít vlastní stav ani životní cyklus (initState, dispose). Pokud potřebuješ vlastní stav nebo reagovat na start/zavření stránky, použij StatefulWidget. Pokud jen čteš data z provideru a nepotřebuješ stav, použij ConsumerWidget. Jednoduché příklady // 1. StatelessWidget – jen vykreslí text class JednoduchaStranka extends StatelessWidget { @override Widget build(BuildContext context) { return Text('Ahoj světe!'); } } // 2. ConsumerWidget – čte data z provideru (Riverpod) final userProvider = Provider((ref) => 'Pepa'); class HomePage extends ConsumerWidget { @override Widget build(BuildContext context, WidgetRef ref) { final user = ref.watch(userProvider); return Text('Ahoj, $user'); } } // 3. StatefulWidget – umí si pamatovat stav a reagovat na změny class PurchaseCodePage extends StatefulWidget { @override State<PurchaseCodePage> createState() => PurchaseCodePageState(); } class PurchaseCodePageState extends State<PurchaseCodePage> { bool _loading = false; @override void initState() { super.initState(); // Tady začíná sledování nákupu } @override void dispose() { // Tady končí sledování nákupu super.dispose(); } @override Widget build(BuildContext context) { return _loading ? CircularProgressIndicator() : Text('Koupit aplikaci'); } } Shrnutí v jedné větě StatelessWidget = nic si nepamatuje, jen vykreslí. StatefulWidget = umí si pamatovat, reaguje na změny, složitější logika. ConsumerWidget = jednoduché zobrazení dat z Riverpod provideru. Riverpod = knihovna na sdílení a správu dat v aplikaci."
  },
  "programming/flutter/codeCoverage.html": {
    "href": "programming/flutter/codeCoverage.html",
    "title": "| Vývojář",
    "summary": "Pokrytí kódu (Code Coverage) Bez nahlédnutí do zdrojového kódu Nainstalujte balíček: npm install -g @lcov-viewer/cli Vytvořte package.json: npm init -y Přidejte skript: { \"name\": \"xxx_app\", \"version\": \"1.0.0\", \"description\": \"A new Flutter project.\", \"main\": \"index.js\", \"directories\": { \"lib\": \"lib\", \"test\": \"test\" }, \"scripts\": { \"test-report\": \"flutter test --coverage && lcov-viewer lcov -o ./coverage/report ./coverage/lcov.info\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\" } Spusťte: npm run test-report S nahlédnutím do zdrojového kódu Stáhněte genhtml. Umístěte soubor do kořenové složky projektu. Ujistěte se, že máte nainstalovaný Git Bash (obsahuje perl). Ověřte instalaci perl: where perl Spusťte v Git Bash: perl genhtml coverage/lcov.info -o coverage/html"
  },
  "programming/flutter/commands.html": {
    "href": "programming/flutter/commands.html",
    "title": "| Vývojář",
    "summary": "\uD83D\uDE80 Flutter – Přehled příkazů \uD83D\uDDC2️ Kategorie \uD83D\uDCBB Příkaz \uD83D\uDCDD Popis \uD83C\uDFF7️ Verze a kanály flutter --version Zobrazí verzi Flutter SDK, Dart SDK a aktivní kanál. flutter upgrade Aktualizuje Flutter SDK. flutter downgrade Vrátí Flutter SDK na předchozí verzi. flutter channel Zobrazí dostupné kanály (stable, beta, dev, master). flutter channel stable Přepne na stabilní kanál. flutter channel beta Přepne na beta kanál. \uD83E\uDE7A Diagnostika flutter doctor Zkontroluje nastavení Flutteru. flutter doctor -v Detailní výstup diagnostiky. \uD83D\uDCE6 Závislosti flutter pub get Stáhne závislosti z pubspec.yaml. flutter pub upgrade Aktualizuje závislosti. flutter pub cache repair Opraví cache závislostí. \uD83D\uDEE0️ Projekt flutter create project_name Vytvoří nový projekt. flutter run Spustí aplikaci. flutter build apk Vytvoří produkční APK. flutter build ios Vytvoří build pro iOS (vyžaduje macOS a Xcode). flutter clean Vyčistí build cache. flutter test Spustí testy. \uD83D\uDCF1 Zařízení flutter devices Zobrazí dostupná zařízení. flutter emulators Zobrazí dostupné emulátory. flutter emulators --launch emulator_id Spustí emulátor podle ID. flutter install Nainstaluje aplikaci na zařízení. \uD83E\uDDD1‍\uD83D\uDCBB Analýza a opravy dart analyze Spustí analýzu kódu. dart fix --apply Aplikuje doporučené opravy. \uD83D\uDCCB Logy flutter logs Zobrazí logy aplikace. Tip: Pro více informací ke konkrétnímu příkazu použij --help (např. flutter run --help)."
  },
  "programming/flutter/create_project.html": {
    "href": "programming/flutter/create_project.html",
    "title": "| Vývojář",
    "summary": "Vytvoření nového projektu Vytvořte projekt: flutter create project_name Spusťte aplikaci: cd project_name flutter run"
  },
  "programming/flutter/localization.html": {
    "href": "programming/flutter/localization.html",
    "title": "| Vývojář",
    "summary": "Lokalizace (interní knihovna) Přidejte do pubspec.yaml: dependencies: flutter: sdk: flutter flutter_localizations: sdk: flutter cupertino_icons: ^1.0.8 flutter_svg: ^2.0.16 Vytvořte lokalizační soubory: lib/l10n/intl_en.arb: { \"@@locale\": \"en\", \"hello\": \"Hello\", \"welcome\": \"Welcome\" } lib/l10n/intl_cs.arb: { \"@@locale\": \"cs\", \"hello\": \"Ahoj\", \"welcome\": \"Vítejte\" } Přidejte intl_utils do pubspec.yaml: dependencies: flutter: sdk: flutter flutter_localizations: sdk: flutter intl_utils: ^2.5.0 cupertino_icons: ^1.0.8 flutter_svg: ^2.0.16 Vygenerujte lokalizační soubory: dart pub get dart run intl_utils:generate Použití lokalizace v aplikaci: import 'package:flutter/material.dart'; import 'package:flutter_localizations/flutter_localizations.dart'; import 'generated/l10n.dart'; void main() { runApp(MyApp()); } class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( localizationsDelegates: [ S.delegate, GlobalMaterialLocalizations.delegate, GlobalWidgetsLocalizations.delegate, GlobalCupertinoLocalizations.delegate, ], supportedLocales: S.delegate.supportedLocales, home: MainPage(), ); } } class MainPage extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: Text(S.of(context).hello)), body: Center(child: Text(S.of(context).welcome)), ); } }"
  },
  "programming/flutter/setupAndConfiguration.html": {
    "href": "programming/flutter/setupAndConfiguration.html",
    "title": "Flutter | Vývojář",
    "summary": "Flutter Flutter je framework pro vývoj mobilních aplikací pro Android a iOS. Používá programovací jazyk Dart. Instalace Důležité: Flutter používá Git pro správu závislostí, proto je nutné mít nainstalovaný Git. Pro vývoj pro Android je potřeba mít nainstalovaný Android Studio. Windows Stáhněte Flutter SDK z oficiálních stránek. Rozbalte ZIP do složky, např. C:\\src\\flutter. Poznámka: Cesta nesmí obsahovat mezery ani speciální znaky. Přidejte cestu k flutter\\bin do proměnné prostředí PATH. Ověřte instalaci: flutter doctor Vypněte analyzování: flutter config --no-analytics Pro kontrolu nastavení: flutter config Android toolchain Ujistěte se, že je nainstalován Android Studio. Nastavte Android toolchain podle obrázků: Vývoj webových aplikací Pokud chcete použít jiný prohlížeč než Google Chrome: flutter config --no-web-browser Spusťte aplikaci: flutter run -d web-server Otevřete ve vlastním prohlížeči adresu http://localhost:PORT/."
  },
  "programming/flutter/troubleshooting.html": {
    "href": "programming/flutter/troubleshooting.html",
    "title": "| Vývojář",
    "summary": "\uD83D\uDEE0️ Řešení problémů ve Flutteru \uD83D\uDD24 Automatické zmenšení textu bez doplňků Použijte kombinaci Expanded a FittedBox pro automatické přizpůsobení velikosti textu: Expanded( child: FittedBox( fit: BoxFit.scaleDown, child: Text('${widget.article.price * chosenQuantity} DH', style: const TextStyle(fontSize: 25, fontWeight: FontWeight.w700), ), ), ) \uD83D\uDEAB Vypnutí pravidla no_logic_in_create_state Jak vypnout linter pravidlo: Otevřete soubor analysis_options.yaml v kořenovém adresáři projektu. Přidejte následující konfiguraci: linter: rules: no_logic_in_create_state: false Uložte soubor a restartujte IDE. \uD83E\uDE9F Chyba: Building with plugins requires symlink support Pokud se zobrazí tato chyba na Windows, je potřeba povolit Developer Mode: Stiskněte Win + R Zadejte ms-settings:developers a potvrďte Povolte Developer Mode (Režim pro vývojáře)"
  },
  "programming/index.html": {
    "href": "programming/index.html",
    "title": "\uD83E\uDDED Výběr platformy pro vývoj aplikací | Vývojář",
    "summary": "\uD83E\uDDED Výběr platformy pro vývoj aplikací \uD83D\uDE80 Praktické rady pro výběr správné platformy a frameworku podle typu projektu. \uD83C\uDF10 Webové aplikace \uD83D\uDDA5️ Přehled populárních frameworků Nástroj/Framework Platformy Výhody Nevýhody React Web ✅ Velká komunita \uD83D\uDD04 Znovupoužitelné komponenty ⚡ Virtuální DOM \uD83D\uDD0C Bohatý ekosystém \uD83D\uDCC8 Strmá křivka učení \uD83D\uDD24 JSX syntaxe \uD83D\uDD17 Nutnost dalších knihoven Vue.js Web \uD83E\uDDE9 Snadné na naučení \uD83D\uDD17 Reaktivní datové vazby \uD83D\uDEE0️ Flexibilní \uD83D\uDC65 Silná komunita \uD83D\uDCE6 Menší ekosystém \uD83D\uDCC9 Omezená škálovatelnost \uD83C\uDFE2 Méně vhodné pro enterprise Angular Web \uD83C\uDFD7️ Komplexní framework \uD83D\uDD04 Obousměrné datové vazby \uD83E\uDDE9 Injekce závislostí \uD83D\uDC65 Silná komunita \uD83D\uDCC8 Strmá křivka učení \uD83E\uDDF1 Složitost ⚡ Výkon u velkých aplikací Svelte Web \uD83D\uDE80 Žádný virtuální DOM ⚡ Výkonný \uD83D\uDCDD Jednoduchá syntaxe \uD83D\uDD17 Reaktivní model \uD83D\uDC65 Menší komunita \uD83D\uDCE6 Omezený ekosystém \uD83E\uDDEA Méně vyspělý ASP.NET Core Web ⚡ Vysoký výkon \uD83C\uDF0D Cross-platform \uD83D\uDD12 Bezpečnost \uD83D\uDD17 Integrace s .NET \uD83D\uDCC8 Strmá křivka učení \uD83E\uDDF1 Složitost \uD83C\uDFA8 Omezené front-end možnosti Django Web \uD83C\uDFD7️ Vysoce úrovňový \uD83D\uDEE1️ Bezpečnost \uD83E\uDDE9 Admin panel \uD83D\uDCC8 Škálovatelnost \uD83E\uDDF1 Monolitická struktura \uD83D\uDCC8 Strmá křivka učení \uD83C\uDFA8 Omezené front-end možnosti Laravel Web ✨ Elegantní syntaxe \uD83D\uDD12 Autentizace \uD83D\uDC65 Komunita ⚡ Rychlý vývoj ⚡ Výkon \uD83E\uDDF1 Monolitická struktura \uD83D\uDCC9 Škálovatelnost Spring Boot Web \uD83C\uDFD7️ Komplexní \uD83D\uDD12 Bezpečnost \uD83D\uDCC8 Škálovatelnost \uD83D\uDD17 Integrace s Java \uD83D\uDCC8 Strmá křivka učení \uD83E\uDDF1 Složitost ⚙️ Konfigurace Express.js Web \uD83E\uDDE9 Minimalistický ⚡ Výkonný \uD83D\uDEE0️ Flexibilní \uD83D\uDC65 Komunita \uD83D\uDD17 Nutnost dalších knihoven \uD83D\uDCE6 Omezené funkce \uD83E\uDDE9 Nekonzistentní kód Ruby on Rails Web \uD83D\uDCDD Konvence ⚡ Rychlý vývoj \uD83E\uDDEA Testování \uD83D\uDC65 Komunita ⚡ Výkon \uD83E\uDDF1 Monolitická struktura \uD83D\uDCC8 Strmá křivka učení \uD83D\uDCF1 Mobilní aplikace \uD83D\uDCF2 Frameworky pro mobilní vývoj Nástroj/Framework Platformy Výhody Nevýhody React Native iOS, Android ⚡ Rychlý vývoj \uD83D\uDC65 Komunita \uD83D\uDD04 Znovupoužitelný kód \uD83D\uDD25 Hot-reload ⚡ Výkon \uD83D\uDCE6 Velikost aplikace \uD83D\uDD17 Závislost na nativních modulech Flutter iOS, Android ⚡ Výkon \uD83C\uDFA8 Krásné UI \uD83D\uDD04 Jeden kód \uD83D\uDD25 Hot-reload \uD83D\uDCE6 Velikost aplikace \uD83D\uDCDA Omezené knihovny \uD83D\uDCC8 Křivka učení pro Dart Xamarin iOS, Android ⚡ Nativní výkon \uD83D\uDD04 Jeden kód \uD83D\uDD17 Microsoft podpora \uD83D\uDEE0️ Přístup k API \uD83D\uDCE6 Velikost aplikace \uD83D\uDC22 Pomalejší vývoj \uD83D\uDD17 Závislost na Microsoft Swift iOS ⚡ Výkon \uD83C\uDFA8 Nativní vzhled \uD83C\uDF4F Apple podpora \uD83D\uDEE0️ Přístup k funkcím \uD83C\uDF4F Pouze iOS \uD83D\uDCC8 Křivka učení \uD83D\uDC65 Menší komunita Kotlin Multiplatform iOS, Android \uD83D\uDD04 Sdílení kódu \uD83D\uDD17 Kotlin podpora \uD83D\uDEE0️ Postupný přechod \uD83E\uDDEA Vývoj \uD83D\uDC65 Omezená komunita ⚙️ Složitější nastavení Ionic iOS, Android \uD83C\uDF10 Web technologie ⚡ Rychlý vývoj \uD83D\uDC65 Komunita \uD83D\uDD0C Pluginy ⚡ Výkon \uD83D\uDEAB Nevhodné pro náročné aplikace \uD83C\uDF10 Závislost na webview Cordova iOS, Android \uD83C\uDF10 Web technologie \uD83D\uDD0C Pluginy \uD83D\uDEE0️ Integrace s webem ⚡ Výkon \uD83D\uDEAB Nevhodné pro složité aplikace \uD83C\uDF10 Závislost na webview NativeScript iOS, Android ⚡ Nativní výkon \uD83D\uDEE0️ Přístup k API \uD83D\uDD17 Podpora Angular/Vue \uD83D\uDCDD TypeScript \uD83D\uDC65 Menší komunita \uD83D\uDCDA Omezené knihovny \uD83D\uDC1E Složitější ladění PhoneGap iOS, Android \uD83C\uDF10 Web technologie \uD83D\uDEE0️ Snadné použití ⚡ Rychlý vývoj \uD83D\uDD17 Adobe podpora ⚡ Výkon \uD83D\uDEAB Nevhodné pro složité aplikace \uD83C\uDF10 Závislost na webview Sencha Touch iOS, Android \uD83C\uDFA8 Bohaté UI ⚡ Výkon \uD83C\uDFD7️ MVC architektura \uD83D\uDD17 Ext JS integrace \uD83D\uDCB0 Drahé licence \uD83D\uDC65 Menší komunita \uD83D\uDCC8 Křivka učení \uD83D\uDCBB Počítačové aplikace \uD83D\uDDA5️ Frameworky pro desktop Nástroj/Framework Platformy Výhody Nevýhody Electron Windows, macOS, Linux \uD83C\uDF10 Web technologie \uD83D\uDC65 Komunita \uD83D\uDD0C Pluginy \uD83D\uDEE0️ Integrace s webem \uD83D\uDCE6 Velikost aplikace \uD83E\uDDE0 Spotřeba paměti \uD83C\uDF10 Závislost na Chromium Qt Windows, macOS, Linux ⚡ Výkon \uD83C\uDFA8 Widgety \uD83D\uDD17 Více jazyků \uD83D\uDDA5️ Nativní vzhled \uD83D\uDCC8 Křivka učení \uD83D\uDCB0 Drahé licence \uD83D\uDCE6 Velikost knihovny WPF Windows \uD83C\uDFA8 Bohaté UI \uD83D\uDD17 Microsoft podpora \uD83D\uDEE0️ .NET integrace \uD83C\uDFD7️ MVVM \uD83E\uDE9F Pouze Windows \uD83D\uDCC8 Křivka učení \uD83E\uDDE0 Nároky na systém JavaFX Windows, macOS, Linux \uD83D\uDD17 Více platforem \uD83D\uDEE0️ Java integrace \uD83C\uDFA8 Bohaté UI \uD83D\uDCDD FXML \uD83D\uDCC8 Křivka učení \uD83D\uDC65 Menší komunita \uD83E\uDDE0 Nároky na systém GTK Windows, macOS, Linux \uD83D\uDDA5️ Nativní vzhled \uD83D\uDD17 Více jazyků \uD83D\uDC65 Komunita \uD83D\uDD13 Open source \uD83D\uDCC8 Křivka učení \uD83C\uDFA8 Omezené UI \uD83D\uDC1E Složitější ladění WinForms Windows \uD83D\uDEE0️ Snadné použití ⚡ Rychlý vývoj \uD83D\uDD17 .NET integrace \uD83D\uDC65 Komunita \uD83E\uDE9F Pouze Windows \uD83E\uDDD3 Zastaralý vzhled \uD83C\uDFA8 Omezené UI Swing Windows, macOS, Linux \uD83D\uDD17 Více platforem \uD83D\uDEE0️ Java integrace \uD83C\uDFA8 Bohaté UI \uD83D\uDC65 Komunita \uD83E\uDDD3 Zastaralý vzhled \uD83E\uDDE0 Nároky na systém \uD83D\uDCC8 Křivka učení Tcl/Tk Windows, macOS, Linux \uD83D\uDEE0️ Snadné použití ⚡ Rychlý vývoj \uD83D\uDD17 Více jazyků \uD83D\uDD13 Open source \uD83E\uDDD3 Zastaralý vzhled \uD83C\uDFA8 Omezené UI \uD83D\uDC65 Menší komunita \uD83D\uDDC4️ Databázový vývoj \uD83D\uDDC3️ Přehled databázových technologií Nástroj/Framework Platformy Výhody Nevýhody PostgreSQL Cross-platform \uD83D\uDD13 Open source \uD83D\uDC65 Komunita \uD83E\uDDE9 Pokročilé funkce ⚡ Výkon ⚙️ Nastavení \uD83E\uDDE0 Nároky na systém \uD83D\uDCC8 Křivka učení MySQL Cross-platform \uD83D\uDD13 Open source \uD83D\uDC65 Komunita \uD83D\uDEE0️ Snadné použití ⚡ Výkon \uD83D\uDCDA Omezené funkce ⚡ Výkon při zatížení \uD83D\uDD17 Méně flexibilní SQLite Cross-platform \uD83D\uDD13 Open source \uD83D\uDEE0️ Snadné použití \uD83E\uDDE0 Nízké nároky \uD83D\uDD0C Vestavěný \uD83D\uDCDA Omezené funkce \uD83D\uDEAB Nevhodné pro velké aplikace \uD83D\uDC65 Omezená podpora MongoDB Cross-platform \uD83D\uDD13 Open source \uD83D\uDD17 Flexibilní schéma ⚡ Výkon \uD83D\uDC65 Komunita \uD83E\uDDE0 Nároky na systém \uD83D\uDCDA Omezené transakce ⚠️ Konzistence dat Microsoft SQL Server Windows, Linux \uD83D\uDD17 Microsoft podpora \uD83E\uDDE9 Pokročilé funkce ⚡ Výkon \uD83D\uDEE0️ .NET integrace \uD83D\uDCB0 Licence \uD83E\uDDE0 Nároky na systém \uD83E\uDE9F Omezená podpora mimo Windows Oracle Database Cross-platform \uD83E\uDDE9 Pokročilé funkce ⚡ Výkon \uD83C\uDFE2 Podpora pro enterprise \uD83D\uDCC8 Škálovatelnost \uD83D\uDCB0 Licence ⚙️ Nastavení \uD83E\uDDE0 Nároky na systém Redis Cross-platform \uD83D\uDD13 Open source ⚡ Výkon \uD83D\uDD17 Datové struktury \uD83D\uDEE0️ Snadné použití \uD83D\uDCDA Omezené funkce \uD83D\uDEAB Nevhodné pro trvalá data \uD83D\uDD17 Omezené dotazy Cassandra Cross-platform \uD83D\uDD13 Open source \uD83D\uDCC8 Škálovatelnost ⚡ Výkon \uD83D\uDC65 Komunita ⚙️ Nastavení \uD83E\uDDE0 Nároky na systém \uD83D\uDCC8 Křivka učení MariaDB Cross-platform \uD83D\uDD13 Open source \uD83D\uDC65 Komunita \uD83D\uDEE0️ Snadné použití ⚡ Výkon \uD83D\uDCDA Omezené funkce ⚡ Výkon při zatížení \uD83D\uDD17 Méně flexibilní Elasticsearch Cross-platform \uD83D\uDD13 Open source ⚡ Výkon \uD83D\uDD0D Full-text vyhledávání \uD83D\uDCC8 Škálovatelnost \uD83E\uDDE0 Nároky na systém ⚙️ Nastavení \uD83D\uDCDA Omezené transakce \uD83C\uDFAE Herní vývoj \uD83D\uDD79️ Frameworky pro vývoj her Nástroj/Framework Platformy Výhody Nevýhody Unity Cross-platform \uD83D\uDC65 Komunita \uD83D\uDED2 Asset store \uD83E\uDDE9 C# skriptování \uD83C\uDFAE 2D/3D hry \uD83D\uDCC8 Křivka učení ⚡ Výkon u velkých projektů \uD83D\uDCB0 Licence Unreal Engine Cross-platform \uD83C\uDFA8 Grafika \uD83E\uDDE9 Blueprint skriptování \uD83D\uDC65 Komunita \uD83C\uDD93 Zdarma pro malé projekty \uD83D\uDCC8 Křivka učení \uD83E\uDDE0 Systémové požadavky \uD83D\uDCB0 Licence pro velké projekty Godot Cross-platform \uD83D\uDD13 Open source \uD83E\uDDE9 Lehký \uD83D\uDCDD GDScript \uD83C\uDFAE 2D/3D hry \uD83D\uDC65 Menší komunita \uD83E\uDDEA Méně vyspělý \uD83D\uDED2 Omezený asset store GameMaker Studio Cross-platform \uD83E\uDDE9 Snadné na naučení \uD83D\uDDB1️ Drag-and-drop \uD83C\uDFAE 2D hry \uD83D\uDC65 Komunita \uD83D\uDCDA Omezené 3D \uD83D\uDCB0 Licence ⚡ Výkon u velkých projektů CryEngine Cross-platform \uD83C\uDFA8 Grafika \uD83C\uDD93 Zdarma ⚡ Výkon pro FPS \uD83D\uDC65 Komunita \uD83D\uDCC8 Křivka učení \uD83E\uDDE0 Systémové požadavky \uD83D\uDCDA Dokumentace RPG Maker Cross-platform \uD83E\uDDE9 Snadné použití \uD83C\uDFAE RPG hry \uD83D\uDC65 Komunita \uD83D\uDED2 Asset store \uD83D\uDEAB Omezeno na RPG \uD83D\uDCDA Omezené možnosti \uD83D\uDCB0 Licence Construct Cross-platform \uD83E\uDDE9 Snadné na naučení \uD83D\uDDB1️ Drag-and-drop \uD83C\uDFAE 2D hry \uD83D\uDC65 Komunita \uD83D\uDCDA Omezené 3D \uD83D\uDCB0 Licence ⚡ Výkon u velkých projektů Cocos2d Cross-platform \uD83D\uDD13 Open source \uD83C\uDFAE 2D hry \uD83E\uDDE9 Lehký \uD83D\uDC65 Komunita \uD83D\uDCDA Omezené 3D \uD83D\uDCC8 Křivka učení \uD83D\uDED2 Omezený asset store Panda3D Cross-platform \uD83D\uDD13 Open source \uD83C\uDFAE 3D hry \uD83D\uDCDD Python skriptování \uD83D\uDC65 Komunita \uD83D\uDCC8 Křivka učení \uD83D\uDED2 Omezený asset store \uD83E\uDDEA Méně vyspělý Phaser Cross-platform \uD83D\uDD13 Open source \uD83C\uDFAE 2D hry \uD83D\uDCDD JavaScript \uD83D\uDC65 Komunita \uD83D\uDCDA Omezené 3D ⚡ Výkon u velkých projektů \uD83D\uDED2 Omezený asset store \uD83D\uDD04 CI & CD \uD83D\uDD01 Nástroje pro automatizaci Nástroj/Framework Platformy Výhody Nevýhody Jenkins Cross-platform \uD83D\uDD13 Open source \uD83D\uDC65 Komunita \uD83D\uDD0C Pluginy \uD83D\uDEE0️ Flexibilní ⚙️ Nastavení \uD83E\uDDE0 Nároky na systém \uD83D\uDCC8 Křivka učení GitLab CI/CD Cross-platform \uD83D\uDD17 GitLab integrace \uD83D\uDEE0️ Snadné použití \uD83D\uDC65 Komunita \uD83C\uDF0D Podpora platforem \uD83D\uDEAB Omezené mimo GitLab \uD83E\uDDE0 Nároky na systém ⚙️ Složitější konfigurace CircleCI Cross-platform \uD83D\uDEE0️ Snadné použití ⚡ Rychlé buildy \uD83D\uDD0C Docker podpora \uD83D\uDD17 Integrace s GitHub/Bitbucket \uD83D\uDEAB Omezené pro self-hosting \uD83D\uDCB0 Náklady \uD83C\uDF0D Omezená podpora Travis CI Cross-platform \uD83D\uDEE0️ Snadné použití \uD83D\uDD17 GitHub integrace \uD83E\uDDE9 Více jazyků \uD83C\uDD93 Open source \uD83D\uDEAB Omezené pro self-hosting \uD83D\uDCB0 Náklady \uD83C\uDF0D Omezená podpora Azure DevOps Cross-platform \uD83D\uDD17 Microsoft podpora \uD83C\uDF0D Azure integrace \uD83D\uDEE0️ Podpora platforem \uD83D\uDD12 Bezpečnost ⚙️ Nastavení \uD83D\uDCB0 Náklady \uD83D\uDCC8 Křivka učení GitHub Actions Cross-platform \uD83D\uDD17 GitHub integrace \uD83D\uDEE0️ Snadné použití \uD83C\uDF0D Podpora platforem \uD83D\uDC65 Komunita \uD83D\uDEAB Omezené mimo GitHub \uD83D\uDCB0 Náklady ⚙️ Složitější konfigurace Bamboo Cross-platform \uD83D\uDD17 Atlassian podpora \uD83D\uDD17 Jira integrace \uD83C\uDF0D Podpora platforem \uD83D\uDEE0️ Flexibilní \uD83D\uDCB0 Náklady ⚙️ Nastavení \uD83D\uDCC8 Křivka učení TeamCity Cross-platform \uD83D\uDD17 JetBrains podpora \uD83C\uDF0D Podpora platforem \uD83D\uDEE0️ Flexibilní \uD83D\uDD12 Bezpečnost \uD83D\uDCB0 Náklady ⚙️ Nastavení \uD83D\uDCC8 Křivka učení Bitbucket Pipelines Cross-platform \uD83D\uDD17 Bitbucket integrace \uD83D\uDEE0️ Snadné použití \uD83C\uDF0D Podpora platforem \uD83D\uDC65 Komunita \uD83D\uDEAB Omezené mimo Bitbucket \uD83D\uDCB0 Náklady ⚙️ Složitější konfigurace Spinnaker Cross-platform \uD83C\uDF0D Multi-cloud podpora \uD83D\uDEE0️ Flexibilní \uD83D\uDC65 Komunita \uD83C\uDF0D Podpora platforem ⚙️ Nastavení \uD83E\uDDE0 Nároky na systém \uD83D\uDCC8 Křivka učení \uD83E\uDDEA Testování \uD83E\uDDE9 Frameworky pro automatizované testy Nástroj/Framework Platformy Výhody Nevýhody Selenium Cross-platform \uD83D\uDD13 Open source \uD83C\uDF0D Více prohlížečů \uD83D\uDC65 Komunita \uD83D\uDEE0️ Flexibilní ⚙️ Nastavení \uD83E\uDDE0 Nároky na systém \uD83D\uDCC8 Křivka učení JUnit Cross-platform \uD83D\uDD13 Open source \uD83D\uDD17 Java integrace \uD83D\uDEE0️ Snadné použití \uD83D\uDC65 Komunita \uD83D\uDEAB Omezené pro ne-Java \uD83D\uDCE6 Omezené funkce \uD83D\uDD17 Nutnost dalších knihoven TestNG Cross-platform \uD83D\uDD13 Open source \uD83D\uDEE0️ Flexibilní ⚡ Paralelní testy \uD83D\uDD17 Java integrace ⚙️ Nastavení \uD83E\uDDE0 Nároky na systém \uD83D\uDCC8 Křivka učení Cypress Cross-platform \uD83D\uDEE0️ Snadné použití ⚡ Rychlé testy \uD83D\uDD17 JavaScript podpora \uD83D\uDCDA Funkce \uD83D\uDEAB Omezené pro ne-JS \uD83E\uDDE0 Nároky na systém \uD83C\uDF0D Omezená podpora pro prohlížeče Mocha Cross-platform \uD83D\uDEE0️ Snadné použití \uD83D\uDEE0️ Flexibilní \uD83D\uDD17 JavaScript podpora \uD83D\uDD17 Node.js integrace \uD83D\uDCE6 Omezené funkce \uD83D\uDD17 Nutnost dalších knihoven \uD83C\uDF0D Omezená podpora pro prohlížeče Jest Cross-platform \uD83D\uDEE0️ Snadné použití ⚡ Rychlé testy \uD83D\uDD17 JavaScript podpora \uD83D\uDCDA Funkce \uD83D\uDEAB Omezené pro ne-JS \uD83E\uDDE0 Nároky na systém \uD83C\uDF0D Omezená podpora pro prohlížeče PyTest Cross-platform \uD83D\uDD13 Open source \uD83D\uDEE0️ Snadné použití \uD83D\uDD17 Python podpora \uD83D\uDEE0️ Flexibilní \uD83D\uDEAB Omezené pro ne-Python \uD83E\uDDE0 Nároky na systém \uD83D\uDCC8 Křivka učení Robot Framework Cross-platform \uD83D\uDD13 Open source \uD83D\uDEE0️ Snadné použití \uD83D\uDD17 Více jazyků \uD83D\uDEE0️ Flexibilní ⚙️ Nastavení \uD83E\uDDE0 Nároky na systém \uD83D\uDCC8 Křivka učení Karma Cross-platform \uD83D\uDEE0️ Snadné použití ⚡ Rychlé testy \uD83D\uDD17 JavaScript podpora \uD83D\uDD17 Angular integrace \uD83D\uDEAB Omezené pro ne-JS \uD83E\uDDE0 Nároky na systém \uD83C\uDF0D Omezená podpora pro prohlížeče NUnit Cross-platform \uD83D\uDD13 Open source \uD83D\uDD17 .NET integrace \uD83D\uDEE0️ Snadné použití \uD83D\uDC65 Komunita \uD83D\uDEAB Omezené pro ne-.NET \uD83D\uDCE6 Omezené funkce \uD83D\uDD17 Nutnost dalších knihoven"
  },
  "programming/net.html": {
    "href": "programming/net.html",
    "title": "\uD83E\uDDD1‍\uD83D\uDCBB .NET – Modifikátory, Runtimes & PInvoke | Vývojář",
    "summary": "\uD83E\uDDD1‍\uD83D\uDCBB .NET – Modifikátory, Runtimes & PInvoke \uD83D\uDE80 Praktické rady pro správu přístupu, multiplatformní nasazení, uvolnění zdrojů a volání nativních DLL v .NET. \uD83D\uDD10 Modifikátory přístupu \uD83D\uDDDD️ Přehled modifikátorů Určuje, kdo má přístup k danému prvku. \uD83D\uDCCD Odkud voláno public protected internal protected internal private protected private file V rámci souboru ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ V rámci třídy ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ ❌ Odvozená třída (stejná assembly) ✔️ ✔️ ✔️ ✔️ ✔️ ❌ ❌ Neodvozená třída (stejná assembly) ✔️ ✔️ ❌ ✔️ ❌ ❌ ❌ Odvozená třída (jiná assembly) ✔️ ✔️ ✔️ ❌ ❌ ❌ ❌ Neodvozená třída (jiná assembly) ✔️ ❌ ❌ ❌ ❌ ❌ ❌ \uD83D\uDCD6 Více podrobností zde. \uD83D\uDCC1 Složka runtimes & multiplatformní nasazení \uD83D\uDDA5️ K čemu slouží složka `runtimes`? Obsahuje platformově specifické knihovny a binární soubory. Umožňuje běh aplikace na různých OS a architekturách. V Unity obdobně slouží složka Plugins. \uD83D\uDCE6 Typy nasazení \uD83C\uDFD7️ Self-contained deployment Aplikace obsahuje vlastní .NET runtime. Běží nezávisle na systému uživatele. Větší velikost, ale maximální kompatibilita. <PropertyGroup> <SelfContained>true</SelfContained> <RuntimeIdentifiers>win-x64;linux-x64;osx-x64</RuntimeIdentifiers> </PropertyGroup> \uD83E\uDDE9 Framework-dependent deployment Aplikace vyžaduje .NET runtime na cílovém systému. Menší velikost, závislost na prostředí. <PropertyGroup> <SelfContained>false</SelfContained> </PropertyGroup> Tip Runtime Identifiers (RID) určují cílovou platformu (např. win-x64, linux-x64, osx-x64). \uD83E\uDDF9 Uvolnění zdrojů \uD83D\uDDD1️ Řízené vs. neřízené zdroje Řízené zdroje: spravuje garbage collector, není nutné explicitně uvolňovat. Neřízené zdroje: soubory, DB, síť – nutné explicitně uvolnit. \uD83E\uDDE8 Destruktor & Dispose \uD83E\uDDE8 Destruktor Syntaxe: ~ClassName() Volán automaticky GC, není deterministický. \uD83E\uDDF9 Dispose Implementace IDisposable. Volán explicitně programátorem pro okamžité uvolnění zdrojů. public class MyResource : IDisposable { public void Dispose() { // Uvolnění zdrojů } } \uD83E\uDDEC Volání funkcí z externích DLL (PInvoke) \uD83D\uDD17 Jak volat nativní kód? Použij DllImport z System.Runtime.InteropServices. using System.Runtime.InteropServices; public class MyProgram { [DllImport(\"User32.dll\")] public static extern int MessageBox(IntPtr h, string m, string c, int type); } Tip Funkce z C++ DLL musí být exportována pomocí extern \"C\" a __declspec(dllexport). extern \"C\" __declspec(dllexport) int MessageBox(HWND h, LPCSTR m, LPCSTR c, int type) { return MessageBoxA(h, m, c, type); } \uD83E\uDDE9 Speciální případ: `__Internal` Funkce se hledá přímo v hlavním spustitelném souboru. [DllImport(\"__Internal\")] public static extern int MyFunction(); \uD83C\uDF4F PInvoke v Unity (AppleAuth příklad) private static class PInvoke { #if UNITY_IOS || UNITY_TVOS private const string DllName = \"__Internal\"; #elif UNITY_STANDALONE_OSX private const string DllName = \"MacOSAppleAuthManager\"; #endif [DllImport(DllName)] public static extern bool AppleAuth_IsCurrentPlatformSupported(); } \uD83D\uDCD6 Více info zde."
  },
  "programming/net/net_attributes.html": {
    "href": "programming/net/net_attributes.html",
    "title": "\uD83C\uDFF7️ .NET – Atributy, Datové anotace & FileHelpers | Vývojář",
    "summary": "\uD83C\uDFF7️ .NET – Atributy, Datové anotace & FileHelpers \uD83D\uDE80 Praktické rady pro práci s atributy v .NET, validaci dat pomocí anotací a zpracování souborů s FileHelpers. \uD83E\uDDE9 Co jsou atributy? \uD83D\uDD0D Základní principy atributů Atributy přidávají metadata ke třídám, metodám, vlastnostem nebo polím. Umožňují rozšířit chování kódu bez změny jeho logiky. Často se využívají pro validaci, serializaci, mapování dat apod. \uD83D\uDCDD Datové anotace \uD83D\uDCDA Nejčastější datové anotace Anotace Popis [Required] Hodnota je povinná [Range] Hodnota v číselném rozsahu [MaxLength] Maximální délka hodnoty [MinLength] Minimální délka hodnoty [StringLength] Maximální a volitelná minimální délka [RegularExpression] Ověření hodnoty regulárním výrazem [DataType] Specifikuje datový typ [Display] Název a pořadí hodnoty \uD83E\uDDD1‍\uD83D\uDCBB Příklad použití datových anotací Definice třídy: public class Author { [Required(ErrorMessage = \"{0} is required\")] [StringLength(50, MinimumLength = 3, ErrorMessage = \"First Name should be minimum 3 characters and a maximum of 50 characters\")] [DataType(DataType.Text)] public string FirstName { get; set; } [Required(ErrorMessage = \"{0} is required\")] [StringLength(50, MinimumLength = 3, ErrorMessage = \"Last Name should be minimum 3 characters and a maximum of 50 characters\")] [DataType(DataType.Text)] public string LastName { get; set; } [DataType(DataType.PhoneNumber)] [Phone] public string PhoneNumber { get; set; } [DataType(DataType.EmailAddress)] [EmailAddress] public string Email { get; set; } } Validace dat: Author author = new Author(); author.FirstName = \"Joydip\"; author.LastName = \"\"; author.PhoneNumber = \"1234567890\"; author.Email = \"joydipkanjilal@yahoo.com\"; ValidationContext context = new ValidationContext(author, null, null); List<ValidationResult> validationResults = new List<ValidationResult>(); bool valid = Validator.TryValidateObject(author, context, validationResults, true); if (!valid) { foreach (ValidationResult validationResult in validationResults) { Console.WriteLine(\"{0}\", validationResult.ErrorMessage); } } \uD83E\uDDEC Vlastní datová anotace Vytvoř třídu dědící z ValidationAttribute. Přepiš metodu IsValid. Definice: [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = false)] public class IsEmptyAttribute : ValidationAttribute { public override bool IsValid(object value) { var inputValue = value as string; return !string.IsNullOrEmpty(inputValue); } } Použití: [IsEmpty(ErrorMessage = \"Should not be null or empty.\")] public string FirstName { get; set; } [IsEmpty(ErrorMessage = \"Should not be null or empty.\")] public string LastName { get; set; } \uD83D\uDCC4 FileHelpers – Zpracování souborů Important Nepodporuje: Záznamy s proměnnou délkou (každý záznam musí mít stejný počet polí) Změnu formátu za běhu (formát musí být stejný po celou dobu běhu programu) \uD83E\uDDE9 Nejčastější atributy FileHelpers Třída [DelimitedRecord] – Záznamy s oddělovači [FixedLengthRecord] – Záznamy s pevnou délkou Pole [FieldTrim] – Odstranění bílých znaků [FieldOptional] – Volitelný sloupec [FieldIgnore] – Ignoruje sloupec [FieldConverter] – Přiřazení konvertoru [FieldOrder] – Pořadí sloupců [FieldQuoted] – Hodnota v uvozovkách \uD83D\uDCDD Příklad použití FileHelpers Definice třídy: [DelimitedRecord(\",\")] public class Order { [FieldConverter(typeof(MyCustomConverter))] public int OrderID; // ... } Čtení souboru: var engine = new FileHelperEngine<Order>(); Order[] result = engine.ReadFile(\"Input.txt\"); Zápis do souboru: var engine = new FileHelperEngine<Order>(); engine.WriteFile(\"Output.txt\", result); \uD83E\uDDEC Vlastní konvertor Vytvoř třídu dědící z ConverterBase. Přepiš metody StringToField a FieldToString. Definice: public class MyCustomConverter : ConverterBase { public override object StringToField(string from) { // Převeďte řetězec na objekt } public override string FieldToString(object fieldValue) { // Převeďte objekt na řetězec } }"
  },
  "programming/net/net_conversion.html": {
    "href": "programming/net/net_conversion.html",
    "title": "\uD83D\uDD04 .NET – Implicitní & Explicitní operátory | Vývojář",
    "summary": "\uD83D\uDD04 .NET – Implicitní & Explicitní operátory \uD83D\uDE80 Praktické rady pro převody typů v .NET, rozdíly mezi implicitními a explicitními operátory, ukázky použití. \uD83E\uDDE9 Co jsou implicitní a explicitní operátory? \uD83D\uDD0D Základní principy převodů Implicitní operátor: Automatický převod, není potřeba psát cast. Explicitní operátor: Vyžaduje použití cast – převod je nutné napsat ručně. Note Implicitní je pohodlnější, ale explicitní je bezpečnější pro složité nebo nejednoznačné převody. \uD83D\uDD04 Implicitní operátor ⚡ Automatický převod Převod mezi typy probíhá automaticky, bez nutnosti psát cast. Příklad: public struct Money { private double _value; public Money(double value) { _value = value; } public static implicit operator double(Money money) { return money._value; } } // Použití Money m = new Money(10.50); double d = m * 2; // Automaticky převede Money na double \uD83D\uDEE1️ Explicitní operátor \uD83D\uDD12 Převod s použitím castu Převod je nutné napsat ručně pomocí (typ). Příklad: public struct Temperature { private double _value; public Temperature(double value) { _value = value; } public static explicit operator double(Temperature temperature) { return temperature._value; } } // Použití Temperature t = new Temperature(70.0); double d = (double)t + 32.0; // Explicitně převedete Temperature na double"
  },
  "programming/net/net_createAPI.html": {
    "href": "programming/net/net_createAPI.html",
    "title": "\uD83C\uDF10 .NET – Vytvoření REST API v ASP.NET Core | Vývojář",
    "summary": "\uD83C\uDF10 .NET – Vytvoření REST API v ASP.NET Core \uD83D\uDE80 Praktické rady pro založení, strukturu, konfiguraci a rozšíření vlastního API v C# s ASP.NET Core. \uD83C\uDFD7️ Vytvoření projektu \uD83D\uDEE0️ Krok za krokem Otevři Visual Studio. Zvol Create a new project. Vyber šablonu ASP.NET Core Web API. Pojmenuj projekt a klikni na Create. Vyber .NET 6 (LTS) nebo nejnovější verzi. \uD83D\uDCC1 Struktura projektu \uD83D\uDDC2️ Přehled složek a souborů Složka/Soubor Popis Controllers Obsahuje kontrolery API. Program.cs Hlavní vstupní bod aplikace. appsettings.json Konfigurační soubor. \uD83E\uDDD1‍\uD83D\uDCBB Přidání kontroleru \uD83D\uDD0C Ukázka kontroleru using Microsoft.AspNetCore.Mvc; namespace MyAPI.Controllers { [ApiController] [Route(\"api/[controller]\")] public class MyController : ControllerBase { [HttpGet] public IActionResult Get() => Ok(new { message = \"Vítejte v mém API!\" }); [HttpPost] public IActionResult Post([FromBody] MyModel model) { if (model == null) return BadRequest(\"Model je null\"); return CreatedAtAction(nameof(Get), new { id = model.Id }, model); } [HttpPut(\"{id}\")] public IActionResult Put(int id, [FromBody] MyModel model) { if (id != model.Id) return BadRequest(\"ID neodpovídá\"); return Ok(model); } [HttpDelete(\"{id}\")] public IActionResult Delete(int id) { // Smazání logiky zde return NoContent(); } [HttpGet(\"search\")] public IActionResult Search([FromQuery] string query) { // Vyhledávací logika zde return Ok(new { query }); } [HttpGet(\"{id}\")] public IActionResult GetById([FromRoute] int id) { var model = new MyModel { Id = id, Name = \"Example\" }; if (model == null) return NotFound(); return Ok(model); } } public class MyModel { public int Id { get; set; } public string Name { get; set; } } } ⚙️ Konfigurace závislostí \uD83D\uDD27 Nastavení v `Startup.cs` using Microsoft.AspNetCore.Builder; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; namespace MyAPI { public class Startup { private readonly IConfiguration _configuration; public Startup(IConfiguration configuration) => _configuration = configuration; public void ConfigureServices(IServiceCollection services) { services.AddControllers(); services.AddCors(); services.AddAuthentication(); services.AddAuthorization(); services.AddSwaggerGen(); services.AddSingleton<MyService>(); } public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILogger<Startup> logger, MyService myService) { if (env.IsDevelopment()) app.UseDeveloperExceptionPage(); else { app.UseExceptionHandler(\"/Home/Error\"); app.UseHsts(); } app.UseHttpsRedirection(); app.UseStaticFiles(); app.UseCors(builder => builder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader()); app.UseRouting(); app.UseAuthentication(); app.UseAuthorization(); app.UseSwagger(); app.UseSwaggerUI(c => { c.RoutePrefix = string.Empty; c.SwaggerEndpoint(\"v1/swagger.json\", \"My API V1\"); }); app.Use(async (context, next) => { myService.LogInformation(); myService.UseApiKeys(); logger.LogInformation(\"Handling request: \" + context.Request.Path); await next.Invoke(); logger.LogInformation(\"Finished handling request.\"); }); app.UseEndpoints(endpoints => endpoints.MapControllers()); } } } \uD83D\uDE80 Vstupní bod aplikace \uD83D\uDCDD `Program.cs` public class Program { public static void Main(string[] args) => CreateHostBuilder(args).Build().Run(); public static IHostBuilder CreateHostBuilder(string[] args) => Host.CreateDefaultBuilder(args) .ConfigureWebHostDefaults(webBuilder => webBuilder.UseStartup<Startup>()); } ⚙️ Konfigurace v appsettings.json \uD83D\uDDC2️ Ukázka konfigurace { \"Logging\": { \"LogLevel\": { \"Default\": \"Information\" }, \"Console\": { \"IncludeScopes\": true } }, \"AllowedHosts\": \"*\", \"ConnectionStrings\": { \"DefaultConnection\": \"Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;\", \"AnotherConnection\": \"Server=anotherServerAddress;Database=anotherDataBase;User Id=anotherUsername;Password=anotherPassword;\" }, \"CustomSettings\": { \"EmailSettings\": { \"SmtpServer\": \"smtp.example.com\", \"SmtpPort\": 587, \"SenderName\": \"Example App\", \"SenderEmail\": \"noreply@example.com\", \"Username\": \"smtpUser\", \"Password\": \"smtpPassword\" }, \"ThirdPartyApiKeys\": { \"GoogleMaps\": \"your-google-maps-api-key\", \"SendGrid\": \"your-sendgrid-api-key\" } } } \uD83E\uDDE9 Příklad služby s konfigurací \uD83D\uDD11 Třída služby public class MyService { private readonly IConfiguration _configuration; private readonly ILogger<MyService> _logger; private readonly string _defaultConnectionString; private readonly string _anotherConnectionString; private readonly EmailSettings _emailSettings; private readonly ThirdPartyApiKeys _apiKeys; public MyService(IConfiguration configuration, ILogger<MyService> logger) { _configuration = configuration; _logger = logger; _defaultConnectionString = _configuration.GetConnectionString(\"DefaultConnection\"); _anotherConnectionString = _configuration.GetConnectionString(\"AnotherConnection\"); _emailSettings = _configuration.GetSection(\"CustomSettings:EmailSettings\").Get<EmailSettings>(); _apiKeys = _configuration.GetSection(\"CustomSettings:ThirdPartyApiKeys\").Get<ThirdPartyApiKeys>(); } public void LogInformation() { _logger.LogInformation(\"Default connection string: {ConnectionString}\", _defaultConnectionString); _logger.LogInformation(\"Another connection string: {ConnectionString}\", _anotherConnectionString); } public void SendEmail() { var smtpClient = new SmtpClient(_emailSettings.SmtpServer, _emailSettings.SmtpPort) { Credentials = new NetworkCredential(_emailSettings.Username, _emailSettings.Password), EnableSsl = true }; var mailMessage = new MailMessage { From = new MailAddress(_emailSettings.SenderEmail, _emailSettings.SenderName), Subject = \"Test Email\", Body = \"This is a test email.\", IsBodyHtml = true, }; mailMessage.To.Add(\"recipient@example.com\"); smtpClient.Send(mailMessage); } public void UseApiKeys() { var googleMapsApiKey = _apiKeys.GoogleMaps; var sendGridApiKey = _apiKeys.SendGrid; _logger.LogInformation(\"Google Maps API Key: {ApiKey}\", googleMapsApiKey); _logger.LogInformation(\"SendGrid API Key: {ApiKey}\", sendGridApiKey); } } public class EmailSettings { public string SmtpServer { get; set; } public int SmtpPort { get; set; } public string SenderName { get; set; } public string SenderEmail { get; set; } public string Username { get; set; } public string Password { get; set; } } public class ThirdPartyApiKeys { public string GoogleMaps { get; set; } public string SendGrid { get; set; } }"
  },
  "programming/net/net_dataTypes.html": {
    "href": "programming/net/net_dataTypes.html",
    "title": "\uD83D\uDCDA .NET – Kolekce & Datové typy | Vývojář",
    "summary": "\uD83D\uDCDA .NET – Kolekce & Datové typy \uD83D\uDE80 Praktické rady pro práci s kolekcemi v .NET, jejich vlastnosti, příklady použití a tipy pro efektivní správu dat. \uD83D\uDD04 FIFO/LIFO kolekce \uD83D\uDE8C Queue (Fronta) FIFO – První vložený prvek je první odebraný. Představ si frontu lidí na autobus. Queue<int> queue = new Queue<int>(); queue.Enqueue(1); queue.Enqueue(2); queue.Enqueue(3); Console.WriteLine(queue.Dequeue()); // 1 \uD83C\uDFAF PriorityQueue Každý prvek má prioritu, vybírá se nejvyšší. Vhodné pro plánování úloh. PriorityQueue<int> queue = new PriorityQueue<int>(); queue.Enqueue(1, 2); queue.Enqueue(2, 1); queue.Enqueue(3, 3); Console.WriteLine(queue.Dequeue()); // 2 \uD83C\uDF7D️ Stack (Zásobník) LIFO – Poslední vložený prvek je první odebraný. Představ si hromadu talířů. Stack<int> stack = new Stack<int>(); stack.Push(1); stack.Push(2); stack.Push(3); Console.WriteLine(stack.Pop()); // 3 \uD83D\uDCCB Seznamy \uD83D\uDCD1 List Indexovatelný seznam prvků. List<int> list = new List<int>(); list.Add(1); list.Add(2); list.Add(3); Console.WriteLine(list[1]); // 2 list.RemoveAt(1); Console.WriteLine(list[1]); // 3 \uD83D\uDD17 LinkedList Efektivní úpravy, rychlé vkládání/mazání. LinkedList<int> linkedList = new LinkedList<int>(); linkedList.AddLast(1); linkedList.AddLast(2); linkedList.AddLast(3); Console.WriteLine(linkedList.First.Value); // 1 linkedList.RemoveFirst(); Console.WriteLine(linkedList.First.Value); // 2 \uD83D\uDDDD️ Slovníky \uD83D\uDCD6 Dictionary Kolekce klíč-hodnota, rychlé vyhledávání. Dictionary<string, int> dictionary = new Dictionary<string, int>(); dictionary.Add(\"key1\", 1); dictionary.Add(\"key2\", 2); Console.WriteLine(dictionary[\"key2\"]); // 2 dictionary.Remove(\"key2\"); Console.WriteLine(dictionary.ContainsKey(\"key2\")); // false \uD83D\uDD22 SortedDictionary Automaticky seřazené podle klíčů. SortedDictionary<string, int> sortedDictionary = new SortedDictionary<string, int>(); sortedDictionary.Add(\"key3\", 3); sortedDictionary.Add(\"key1\", 1); Console.WriteLine(sortedDictionary.First().Key); // \"key1\" \uD83D\uDEAB Kolekce bez duplicit \uD83D\uDD17 HashSet Množina bez duplicit, rychlé vyhledávání. HashSet<int> hashSet = new HashSet<int>(); hashSet.Add(1); hashSet.Add(2); Console.WriteLine(hashSet.Contains(2)); // true hashSet.Remove(2); Console.WriteLine(hashSet.Contains(2)); // false \uD83D\uDCE6 Hashtable Starší kolekce klíč-hodnota. Hashtable hashtable = new Hashtable(); hashtable.Add(\"key1\", 1); Console.WriteLine(hashtable[\"key1\"]); // 1 \uD83E\uDDE9 Tuple kolekce \uD83E\uDDEE Tuple Kombinace různých typů v jedné kolekci. Tuple<int, string> tuple = new Tuple<int, string>(1, \"Hello\"); Console.WriteLine(tuple.Item1); // 1 Console.WriteLine(tuple.Item2); // \"Hello\" ⚡ ValueTuple Rychlé vytváření, možnost pojmenování prvků. (var Shield, var Sword) = (1, \"Hello\"); Console.WriteLine(Shield); // 1 Console.WriteLine(Sword); // \"Hello\" \uD83D\uDC40 Pozorovatelné kolekce \uD83D\uDD14 ObservableCollection Upozorní na změny v kolekci. ObservableCollection<int> observableCollection = new ObservableCollection<int>(); observableCollection.CollectionChanged += (s, e) => Console.WriteLine(\"Collection changed\"); observableCollection.Add(1); \uD83D\uDD12 Kolekce pouze pro čtení \uD83D\uDCDA ReadOnlyCollection Nelze měnit po vytvoření. List<int> list = new List<int> { 1, 2, 3 }; ReadOnlyCollection<int> readOnlyCollection = new ReadOnlyCollection<int>(list); Console.WriteLine(readOnlyCollection[1]); // 2 \uD83D\uDDDD️ ReadOnlyDictionary Klíč-hodnota, pouze pro čtení. Dictionary<string, int> dictionary = new Dictionary<string, int> { { \"key1\", 1 }, { \"key2\", 2 } }; ReadOnlyDictionary<string, int> readOnlyDictionary = new ReadOnlyDictionary<string, int>(dictionary); Console.WriteLine(readOnlyDictionary[\"key2\"]); // 2 \uD83D\uDEE1️ Neměnné kolekce \uD83E\uDDCA ImmutableArray Pole, které nelze měnit. ImmutableArray<int> immutableArray = ImmutableArray.Create(1, 2, 3); Console.WriteLine(immutableArray[1]); // 2 \uD83D\uDCCB ImmutableList Seznam, který nelze měnit. ImmutableList<int> immutableList = ImmutableList.Create(1, 2, 3); Console.WriteLine(immutableList[1]); // 2 \uD83D\uDDDD️ ImmutableDictionary Klíč-hodnota, neměnný. ImmutableDictionary<string, int> immutableDictionary = ImmutableDictionary.Create<string, int>(); immutableDictionary = immutableDictionary.Add(\"key1\", 1); Console.WriteLine(immutableDictionary[\"key1\"]); // 1 \uD83D\uDD17 ImmutableHashSet Množina, neměnná. ImmutableHashSet<int> immutableHashSet = ImmutableHashSet.Create(1, 2, 3); Console.WriteLine(immutableHashSet.Contains(2)); // true \uD83D\uDD22 ImmutableSortedSet Seřazená množina, neměnná. ImmutableSortedSet<int> immutableSortedSet = ImmutableSortedSet.Create(3, 1, 2); Console.WriteLine(immutableSortedSet.Min); // 1 \uD83D\uDE8C ImmutableQueue Fronta, neměnná. ImmutableQueue<int> immutableQueue = ImmutableQueue.Create(1, 2, 3); Console.WriteLine(immutableQueue.Peek()); // 1 \uD83C\uDF7D️ ImmutableStack Zásobník, neměnný. ImmutableStack<int> immutableStack = ImmutableStack.Create(1, 2, 3); Console.WriteLine(immutableStack.Peek()); // 3 \uD83E\uDDE0 Paměťové kolekce \uD83D\uDCBE Memory Bezpečný přístup k paměti. Memory<int> memory = new Memory<int>(new int[] { 1, 2, 3 }); Console.WriteLine(memory.Span[1]); // 2 \uD83D\uDD0D Span Efektivní práce s pamětí. Span<int> span = new Span<int>(new int[] { 1, 2, 3 }); Console.WriteLine(span[1]); // 2 \uD83D\uDD78️ Slabé reference \uD83E\uDDEC WeakReference Umožňuje GC uvolnit objekt. WeakReference<int> weakReference = new WeakReference<int>(1); Console.WriteLine(weakReference.TryGetTarget(out int value)); // true \uD83E\uDDF5 Kolekce pro více vláken \uD83D\uDE8C ConcurrentQueue Fronta bezpečná pro více vláken. ConcurrentQueue<int> concurrentQueue = new ConcurrentQueue<int>(); concurrentQueue.Enqueue(1); Console.WriteLine(concurrentQueue.TryDequeue(out int value)); // true \uD83C\uDF7D️ ConcurrentStack Zásobník bezpečný pro více vláken. ConcurrentStack<int> concurrentStack = new ConcurrentStack<int>(); concurrentStack.Push(1); Console.WriteLine(concurrentStack.TryPop(out int value)); // true \uD83D\uDDDD️ ConcurrentDictionary Klíč-hodnota, bezpečné pro více vláken. ConcurrentDictionary<string, int> concurrentDictionary = new ConcurrentDictionary<string, int>(); concurrentDictionary.TryAdd(\"key1\", 1); Console.WriteLine(concurrentDictionary[\"key1\"]); // 1 \uD83D\uDC5C ConcurrentBag Kolekce bezpečná pro více vláken. ConcurrentBag<int> concurrentBag = new ConcurrentBag<int>(); concurrentBag.Add(1); Console.WriteLine(concurrentBag.TryTake(out int value)); // true ⏳ BlockingCollection Blokuje vlákno při prázdné/plné kolekci. BlockingCollection<int> blockingCollection = new BlockingCollection<int>(); Task.Run(() => blockingCollection.Add(1)); Console.WriteLine(blockingCollection.Take()); // 1"
  },
  "programming/net/net_enum.html": {
    "href": "programming/net/net_enum.html",
    "title": "\uD83E\uDDEE .NET – Enum (Výčtové typy) | Vývojář",
    "summary": "\uD83E\uDDEE .NET – Enum (Výčtové typy) \uD83D\uDE80 Praktické rady pro použití výčtových typů v .NET, volbu velikosti a tipy pro efektivní správu hodnot. \uD83E\uDDE9 Co je Enum? \uD83D\uDD0D Základní principy Enum Enum je výčtový typ, který umožňuje definovat vlastní datový typ s pevně danými hodnotami. Zvyšuje čitelnost kódu a zabraňuje chybám při práci s hodnotami. \uD83D\uDDC2️ Typy Enum podle velikosti \uD83D\uDCE6 Velikost a rozsah Enum Deklarace Popis Velikost enum A {} Velký batoh, může držet hodně čísel (defaultně int) 4 bajty enum A : byte {} Malý batoh, jen pár čísel (0–255), vhodné pro úsporu místa 1 bajt Tip Pokud potřebujete ušetřit místo a máte jen pár hodnot, použijte byte. Pro větší rozsah nebo záporná čísla použijte int. \uD83E\uDDD1‍\uD83D\uDCBB Příklad použití Enum \uD83D\uDCDD Ukázka deklarace a použití public enum Day { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday } // Použití Day today = Day.Monday; Console.WriteLine(today); // Monday Enum s vlastní velikostí: public enum Status : byte { Ok = 1, Error = 2, Unknown = 3 }"
  },
  "programming/net/net_files.html": {
    "href": "programming/net/net_files.html",
    "title": "\uD83D\uDDC2️ .NET – Práce se soubory: Oddělovače & Escape sekvence | Vývojář",
    "summary": "\uD83D\uDDC2️ .NET – Práce se soubory: Oddělovače & Escape sekvence \uD83D\uDE80 Praktické rady pro detekci oddělovače v souboru, práci s BOM a speciálními znaky v .NET. \uD83D\uDD0E Vyhledání oddělovače v souboru \uD83E\uDDE9 Algoritmus detekce oddělovače Prochází řádky souboru a počítá výskyt oddělovačů (;, ,). Vybere nejčastější oddělovač, pokud je jednoznačný. Pokud není jednoznačný (jiný oddělovač se vyskytuje alespoň v 70% případů), vyhodí chybu. Příklad kódu: public static StreamReader FindDelimiter(StreamReader reader, out char delimiter, int? linesToRead = null) { const char semicolon = ';'; const char comma = ','; Dictionary<char, int> delimiters = new Dictionary<char, int> { { semicolon, 0 }, { comma, 0 }, }; string line; int linesRead = 0; while ((line = reader.ReadLine()) != null && (!linesToRead.HasValue || linesRead < linesToRead.Value)) { foreach (char c in line) { switch (c) { case semicolon: delimiters[semicolon]++; break; case comma: delimiters[comma]++; break; } } linesRead++; } delimiters = delimiters.Where(i => i.Value != 0).ToDictionary(i => i.Key, i => i.Value); if (delimiters.Count == 0) throw new Exception(\"Nepodařilo se dohledat jakýkoli oddělovač.\"); var highest = delimiters.Aggregate((item1, item2) => item1.Value > item2.Value ? item1 : item2); const int failPercentage = 70; if ((from val in delimiters where val.Key != highest.Key select new decimal(val.Value) / new decimal(highest.Value) * 100).Any(diff => diff >= failPercentage)) throw new Exception(\"Typ oddělovače se nepodařilo jednoznačně identifikovat.\"); delimiter = highest.Key; reader.DiscardBufferedData(); reader.BaseStream.Seek(0, System.IO.SeekOrigin.Begin); return reader; } \uD83C\uDFF7️ Escape sekvence v souborech \uD83D\uDD0D Nejčastější speciální znaky Sekvence Název Popis \\uFEFF Byte Order Mark (BOM) Určuje pořadí bajtů, může způsobit problémy při čtení souborů. \\u0000 Null znak Označuje konec řetězce, může komplikovat parsování dat. Warning BOM i null znak mohou způsobit potíže s některými knihovnami a nástroji. Doporučuje se je odstraňovat nebo správně ošetřit při zpracování dat."
  },
  "programming/net/net_interface.html": {
    "href": "programming/net/net_interface.html",
    "title": "\uD83E\uDDE9 .NET – Interface (Rozhraní) | Vývojář",
    "summary": "\uD83E\uDDE9 .NET – Interface (Rozhraní) \uD83D\uDE80 Praktické rady pro použití rozhraní v .NET, rozdíl mezi mělkým a hlubokým klonováním, ukázky implementace. \uD83E\uDDD1‍\uD83D\uDCBB Co je Interface? \uD83D\uDD0D Základní principy rozhraní Interface definuje smlouvu, kterou musí třída implementovat. Umožňuje polymorfismus a oddělení implementace od definice. \uD83C\uDF00 ICloneable – Klonování objektů \uD83E\uDDEC Mělká kopie Kopíruje pouze odkazy na objekty, ne jejich obsah. public object Clone() { // Pro referenční typy se kopíruje reference (odkaz), nikoli objekt return this.MemberwiseClone(); } \uD83C\uDF0A Hluboká kopie Kopíruje celý objekt včetně vnořených dat. Může mít vliv na výkon. Warning Hluboké klonování je náročnější na výkon, používej s rozmyslem. Automaticky (serializace): public static T DeepClone<T>(T obj) { using (var ms = new MemoryStream()) { var formatter = new BinaryFormatter(); formatter.Serialize(ms, obj); ms.Position = 0; return (T)formatter.Deserialize(ms); } } Ručně (vlastní implementace): public class Record : ICloneable { // ... další vlastnosti ... public List<string> Tnr { get; set; } public List<string> Ean { get; set; } // ... další vlastnosti ... public object Clone() { return new Record { // ... klonování dalších vlastností ... Tnr = this.Tnr != null ? new List<string>(this.Tnr) : null, Ean = this.Ean != null ? new List<string>(this.Ean) : null, // ... klonování dalších vlastností ... }; } } Note Stejný postup použij pro klonování vnořených objektů."
  },
  "programming/net/net_methods.html": {
    "href": "programming/net/net_methods.html",
    "title": "\uD83E\uDDEE .NET – Metody & Parametry | Vývojář",
    "summary": "\uD83E\uDDEE .NET – Metody & Parametry \uD83D\uDE80 Praktické rady pro práci s metodami v .NET, typy parametrů, delegáty, asynchronní a paralelní zpracování. \uD83D\uDDC2️ Základní pojmy \uD83D\uDD0D Parametr vs. Argument Parametr – proměnná v definici metody. Argument – skutečná hodnota předaná při volání metody. \uD83D\uDD04 Předání hodnoty vs. reference \uD83D\uDCE6 Hodnota Vytvoří se kopie dat, změny v metodě neovlivní původní data. Efektivní pro malé typy (int, float, bool). \uD83D\uDD17 Reference Předává se odkaz na původní data (ref, out, in). Metoda může manipulovat s původními daty (kromě in – pouze pro čtení). Efektivní pro velké struktury/třídy. \uD83E\uDDD1‍\uD83D\uDCBB Druhy metod \uD83D\uDCDA Přehled typů metod Typ metody Klíčové slovo Popis Indexátor this[] Umožňuje objektům být indexovány jako pole. Statická static Volání bez instance třídy. Instanční — Vyžaduje instanci třídy. Virtuální virtual Lze přepsat v potomcích. Abstraktní abstract Bez implementace, nutná v potomcích. Přetížená — Stejný název, různé parametry. Výchozí hodnoty = Parametry s defaultní hodnotou. Params params Libovolný počet parametrů. Ref/Out/In ref/out/in Předání odkazem, různé chování. Rozšířené this Přidání metod existujícím typům. Asynchronní async Asynchronní operace. \uD83E\uDDE9 Ukázky deklarace metod \uD83D\uDCD1 Indexátor public interface IOAuth2Configuration { IClientConfiguration this[string clientTypeName] { get; } } ⚡ Statická metoda public static void MyStaticMethod() { /* kód */ } \uD83E\uDDD1‍\uD83D\uDCBB Instanční metoda public void MyInstanceMethod() { /* kód */ } \uD83D\uDD04 Virtuální metoda public virtual void MyVirtualMethod() { /* kód */ } \uD83C\uDF00 Abstraktní metoda public abstract void MyAbstractMethod(); \uD83D\uDD01 Přetížené metody public void MyMethod(int param1) { } public void MyMethod(int param1, int param2) { } \uD83D\uDCDD Výchozí hodnoty parametrů public void MyMethod(int param1, int param2 = 10) { } \uD83D\uDD22 Params public void MyMethod(params int[] numbers) { } \uD83D\uDD17 Ref/Out/In parametry public void AddTen(ref int number) { number += 10; } public void GetValues(out int x, out int y) { x = 5; y = 10; } public void PrintValue(in int number) { Console.WriteLine(number); } \uD83E\uDDE9 Rozšířené metody public static class MyExtensionMethods { public static void MyExtensionMethod(this MyType myType) { } } ⚡ Asynchronní metoda public async Task MyAsyncMethod() { await Task.CompletedTask; } public async Task<int> MyAsyncMethod() { return await Task.FromResult(42); } \uD83E\uDDED Ukazatel na metody & Delegáti \uD83D\uDD17 Delegáti Typově bezpečné odkazy na metody. Užitečné pro události, LINQ, asynchronní operace. public delegate void MyDelegate(string message); MyDelegate del = MyMethod; del(\"Hello, World!\"); ⚡ Generické delegáty Func – vrací hodnotu. Action – nevrací hodnotu. Predicate – vrací bool. Func<int, int, int> add = (x, y) => x + y; Action<string> print = msg => Console.WriteLine(msg); Predicate<int> isEven = x => x % 2 == 0; \uD83D\uDE80 Asynchronní & Paralelní metody ⚡ Asynchronní volání Umožňuje neblokovat hlavní vlákno. Klíčová slova async a await. public async Task MethodA() { await MethodB(); } public async Task MethodB() { await Task.Delay(1000); } \uD83E\uDDF5 Paralelní zpracování (TPL) Task, Task<T>, Parallel.For, Parallel.ForEach, Parallel.Invoke. Parallel.For(0, 10, i => { /* kód */ }); Task<int> task = Task.Run(() => 42); int result = task.Result;"
  },
  "programming/net/net_nunit.html": {
    "href": "programming/net/net_nunit.html",
    "title": "\uD83E\uDDEA .NET – NUnit (Testovací framework) | Vývojář",
    "summary": "\uD83E\uDDEA .NET – NUnit (Testovací framework) \uD83D\uDE80 Praktické rady pro psaní unit testů v .NET pomocí NUnit, práce s více asserty a odkazy na video prezentaci. \uD83E\uDDE9 Co je NUnit? \uD83D\uDD0D Základní principy NUnit NUnit je populární open-source framework pro unit testování v .NET. Umožňuje psát automatizované testy, ověřovat chování kódu a zvyšovat jeho kvalitu. Podporuje různé typy asertů, parametrizované testy, setup/teardown metody a další. \uD83E\uDDD1‍\uD83D\uDCBB Multiple Asserts \uD83E\uDDE9 Jak fungují Multiple Asserts? Ve standardním případě, pokud první assert selže, následující testy v metodě už nejsou spuštěny. Pomocí Assert.Multiple lze provést více ověření najednou a zobrazit všechny chyby najednou. Vhodné pro komplexní ověřování výsledků. Ukázka použití: [Test] public void MultipleAssertsDemo() { var situationUnderTest = new SomeCalculator(); var result = situationUnderTest.DoCalculation(); Assert.Multiple(() => { Assert.That(result.RealPart, Is.EqualTo(5.2)); Assert.That(result.ImaginaryPart, Is.EqualTo(3.9)); }); // Lze použít i klasickou syntaxi Assert.Multiple(() => { ClassicAssert.AreEqual(5.2, result.RealPart, \"Real Part\"); ClassicAssert.AreEqual(3.9, result.ImaginaryPart, \"Imaginary Part\"); }); } Note Multiple asserts využij, pokud chceš v jednom testu ověřit více vlastností najednou. \uD83C\uDFAC Video prezentace \uD83D\uDCFA Trendy v unit testování a mockování Doporučené video: Trendy v unit testování a mockování (WUG Days 2018)"
  },
  "programming/net/net_wpf.html": {
    "href": "programming/net/net_wpf.html",
    "title": "\uD83D\uDDBC️ WPF – Moderní UI & Tipy | Vývojář",
    "summary": "\uD83D\uDDBC️ WPF – Moderní UI & Tipy \uD83D\uDE80 Praktické rady pro tvorbu desktopových aplikací ve WPF, stylování, datové vazby, validaci, animace a responzivní design. \uD83E\uDDE9 Co je WPF? \uD83D\uDD0D Základní principy WPF Tvorba moderních desktopových aplikací pro Windows. Oddělení logiky (C#) od vzhledu (XAML). Podpora datových vazeb, stylů, animací a vektorové grafiky. \uD83D\uDDB1️ Základní ovládací prvky \uD83D\uDD18 Button Interaktivní tlačítko s možností stylování a událostí. <Button Content=\"Klikni na mě\" Background=\"LightBlue\" Foreground=\"White\" BorderBrush=\"Blue\" BorderThickness=\"2\" FontSize=\"16\" Padding=\"10\" Margin=\"10\" CornerRadius=\"5\"/> ✏️ TextBox Vstupní pole pro text s událostmi a stylováním. <TextBox Text=\"Zadejte text\" Background=\"White\" Foreground=\"Black\" BorderBrush=\"Gray\" BorderThickness=\"1\" FontSize=\"14\" Padding=\"5\" Margin=\"10\" Width=\"200\" Height=\"30\" TextChanged=\"TextBox_TextChanged\"/> ☑️ CheckBox Zaškrtávací pole pro volby. <CheckBox Content=\"Souhlasím s podmínkami\" Background=\"Transparent\" Foreground=\"Black\" BorderBrush=\"Gray\" BorderThickness=\"1\" FontSize=\"14\" Padding=\"5\" Margin=\"10\" Checked=\"CheckBox_Checked\"/> \uD83D\uDD3D ComboBox Rozevírací seznam pro výběr jedné hodnoty. <ComboBox Background=\"White\" Foreground=\"Black\" BorderBrush=\"Gray\" BorderThickness=\"1\" FontSize=\"14\" Padding=\"5\" Margin=\"10\" Width=\"150\" Height=\"30\"> <ComboBoxItem Content=\"Možnost 1\"/> <ComboBoxItem Content=\"Možnost 2\"/> </ComboBox> \uD83D\uDD18 RadioButton Výběr jedné možnosti ze skupiny. <StackPanel Margin=\"10\"> <TextBlock Text=\"Vyberte si jednu z možností:\" FontSize=\"16\" Margin=\"0,0,0,10\"/> <RadioButton Content=\"Možnost A\" GroupName=\"OptionsGroup\"/> <RadioButton Content=\"Možnost B\" GroupName=\"OptionsGroup\"/> </StackPanel> \uD83C\uDF9A️ Slider Výběr hodnoty posunutím jezdce. <Slider Minimum=\"0\" Maximum=\"100\" Value=\"50\" Background=\"LightGray\" Foreground=\"Blue\" Width=\"200\" Height=\"30\" Margin=\"10\"/> \uD83D\uDEE0️ Vlastní ovládací prvky \uD83E\uDDEC Jak vytvořit vlastní prvek? Dědění z existujícího prvku (např. Button). Definice stylu a šablony v XAML. public class MyCustomButton : Button { static MyCustomButton() { DefaultStyleKeyProperty.OverrideMetadata(typeof(MyCustomButton), new FrameworkPropertyMetadata(typeof(MyCustomButton))); } } <Style TargetType=\"{x:Type local:MyCustomButton}\"> <Setter Property=\"Background\" Value=\"LightGray\"/> <Setter Property=\"Template\"> <Setter.Value> <ControlTemplate TargetType=\"{x:Type local:MyCustomButton}\"> <Border Background=\"{TemplateBinding Background}\" CornerRadius=\"10\"> <ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/> </Border> </ControlTemplate> </Setter.Value> </Setter> </Style> \uD83C\uDFA8 Styly & Šablony \uD83D\uDD8C️ Definování stylu Styl pro více prvků najednou. <Window.Resources> <Style x:Key=\"MyButtonStyle\" TargetType=\"Button\"> <Setter Property=\"Background\" Value=\"Blue\"/> <Setter Property=\"Foreground\" Value=\"White\"/> <Setter Property=\"FontSize\" Value=\"14\"/> <Setter Property=\"Padding\" Value=\"10\"/> </Style> </Window.Resources> \uD83E\uDDE9 Použití stylu <Button Style=\"{StaticResource MyButtonStyle}\" Content=\"Klikni na mě\"/> \uD83E\uDDEC Šablony (ControlTemplates) Úplná změna vzhledu prvku. <ControlTemplate x:Key=\"MyButtonTemplate\" TargetType=\"Button\"> <Border Background=\"{TemplateBinding Background}\" CornerRadius=\"5\"> <ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/> </Border> </ControlTemplate> <Button Template=\"{StaticResource MyButtonTemplate}\" Content=\"Stylizované tlačítko\"/> \uD83E\uDDED Prefixy v XAML \uD83D\uDCDA Přehled prefixů Prefix Použití x Standardní XAML funkce (x:Class, x:Name) local Vlastní namespace aplikace sys Základní typy .NET controls Externí knihovny mc Kompatibilita markupů d Návrhové funkce <Window x:Class=\"MyNamespace.MainWindow\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:local=\"clr-namespace:MyNamespace\" xmlns:sys=\"clr-namespace:System;assembly=mscorlib\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" mc:Ignorable=\"d\"> \uD83D\uDCD0 Responzivní design \uD83E\uDDF1 Layout Panely Grid: Řádky/sloupce StackPanel: Vertikální/horizontální řazení WrapPanel: Zalomení prvků DockPanel: Uspořádání k okrajům \uD83D\uDD04 Dynamické velikosti Procenta, hvězdičky (*), Auto pro flexibilní rozložení. <Grid> <Grid.ColumnDefinitions> <ColumnDefinition Width=\"2*\"/> <ColumnDefinition Width=\"1*\"/> </Grid.ColumnDefinitions> </Grid> \uD83D\uDCCF Sledování změny velikosti Událost SizeChanged pro dynamické úpravy. private void Window_SizeChanged(object sender, SizeChangedEventArgs e) { // Úprava velikosti prvků podle okna } \uD83D\uDD0D ViewBox Automatické škálování obsahu. <ViewBox> <Grid> <TextBlock Text=\"Responzivní text!\" FontSize=\"20\"/> </Grid> </ViewBox> ⚡ Triggery \uD83C\uDFAF Dynamické změny stylu Změna vzhledu na základě událostí. <Style TargetType=\"Button\"> <Setter Property=\"Background\" Value=\"Gray\"/> <Style.Triggers> <Trigger Property=\"IsMouseOver\" Value=\"True\"> <Setter Property=\"Background\" Value=\"Green\"/> </Trigger> </Style.Triggers> </Style> \uD83D\uDD17 Data Binding (Vazba dat) \uD83E\uDDD1‍\uD83D\uDCBB ViewModel + Binding Použití INotifyPropertyChanged pro automatickou aktualizaci UI. public class MyViewModel : INotifyPropertyChanged { private string _name; public string Name { get => _name; set { _name = value; OnPropertyChanged(nameof(Name)); } } public event PropertyChangedEventHandler PropertyChanged; protected void OnPropertyChanged(string propertyName) { PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName)); } } <TextBox Text=\"{Binding Name, UpdateSourceTrigger=PropertyChanged}\" Width=\"200\"/> <TextBlock Text=\"{Binding Name}\" Margin=\"10,50,10,10\"/> \uD83D\uDEE1️ Validace ✅ IDataErrorInfo Validace vlastností s chybovou zprávou. public class MyViewModel : INotifyPropertyChanged, IDataErrorInfo { // ... implementace validace ... } <TextBox Text=\"{Binding Name, ValidatesOnDataErrors=True}\" /> ✅ INotifyDataErrorInfo Pokročilá validace s více chybami. public class MyViewModel : INotifyPropertyChanged, INotifyDataErrorInfo { // ... implementace validace ... } <TextBox Text=\"{Binding Name, ValidatesOnNotifyDataErrors=True}\" /> \uD83C\uDFAC Animace \uD83C\uDF08 Příklad animace Animace změny barvy pozadí tlačítka. <Button Content=\"Klikni na mě\"> <Button.Triggers> <EventTrigger RoutedEvent=\"Button.MouseEnter\"> <BeginStoryboard> <Storyboard> <ColorAnimation Storyboard.TargetProperty=\"(Button.Background).(SolidColorBrush.Color)\" To=\"Red\" Duration=\"0:0:1\"/> </Storyboard> </BeginStoryboard> </EventTrigger> </Button.Triggers> </Button>"
  },
  "programming/net/net_xml.html": {
    "href": "programming/net/net_xml.html",
    "title": "\uD83D\uDDC2️ .NET – XML: Serializace, CDATA, Namespace & Konvence | Vývojář",
    "summary": "\uD83D\uDDC2️ .NET – XML: Serializace, CDATA, Namespace & Konvence \uD83D\uDE80 Praktické rady pro práci s XML v .NET, náhradu znaků, CDATA, serializaci/deserializaci objektů, namespace a konvence. \uD83D\uDD24 Náhrada znaků v XML \uD83E\uDDE9 Základní a speciální znaky Znak Náhrada Popis < &lt; Levá ostrá závorka > &gt; Pravá ostrá závorka & &amp; Ampersand ' &apos; Apostrof \" &quot; Uvozovky Á &Aacute; Á s čárkou á &aacute; á s čárkou Č &Ccaron; Č s háčkem č &ccaron; č s háčkem Note Stejným způsobem lze nahradit i další znaky s diakritikou pomocí prefixů acute (čárka) nebo caron (háček). \uD83D\uDCDD CDATA sekce \uD83D\uDD0D Co je CDATA? Umožňuje vložit do XML libovolný text, včetně speciálních znaků. Vše uvnitř CDATA není interpretováno jako XML. Ukázka: <exampleOfACDATA> <![CDATA[ Můžete použít > < „ & nebo vkládat elementy <foo></bar> bez narušení formátu XML. ]]> </exampleOfACDATA> \uD83D\uDD04 Serializace & Deserializace objektů \uD83E\uDDE9 Jak převést objekt na XML a zpět? Serializace objektu do XML public string SerializeObject(MyObject myObject) { var serializer = new XmlSerializer(typeof(MyObject)); using (var stringWriter = new StringWriter()) { serializer.Serialize(stringWriter, myObject); return stringWriter.ToString(); } } Deserializace XML na objekt public MyObject DeserializeObject(string xml) { var serializer = new XmlSerializer(typeof(MyObject)); using (var stringReader = new StringReader(xml)) { return (MyObject)serializer.Deserialize(stringReader); } } \uD83C\uDFF7️ Namespace v XML \uD83D\uDD0D Jak fungují jmenné prostory? Zabraňují konfliktu názvů v XML. Poznáte podle atributu xmlns. Note URL namespace nemusí být skutečná adresa, slouží jen jako identifikátor. Příklad s prefixem: <p:Person xmlns:p=\"test\"> <p:FirstName>John</p:FirstName> </p:Person> Serializace s namespace: XmlSerializerNamespaces ns = new XmlSerializerNamespaces(); ns.Add(\"p\", \"test\"); s.Serialize(writer, person, ns); Bez namespace: <person> <name>John Doe</name> </person> ns.Add(\"\", \"\"); s.Serialize(writer, person, ns); Warning Vlastnosti nesmí mít atribut XmlElement s namespace, pokud serializujete bez namespace. Odebrání namespace z XML: XDocument document = XDocument.Parse(dataOutput); foreach (var element in document.Root.DescendantsAndSelf()) { element.Name = element.Name.LocalName; element.ReplaceAttributes(element.Attributes() .Where(x => !x.IsNamespaceDeclaration) .Select(x => new XAttribute(x.Name.LocalName, x.Value))); } dataOutput = document.ToString(); \uD83E\uDDE9 Konvence serializace XML \uD83D\uDCDA Přizpůsobení serializace tříd a vlastností Attribut/Metoda Použití [XmlRoot(\"MyClass\")] Pojmenuje kořenový element [XmlIgnore] Ignoruje vlastnost při serializaci [XmlNamespaceDeclarations] Povolit jmenné prostory jako atributy ShouldSerialize{Property} Metoda rozhodující o serializaci vlastnosti {Property}Specified Bool vlastnost určující serializaci [XmlArray(\"MyCollection\")] Pojmenuje kolekci [XmlArrayItem(\"Item\")] Pojmenuje položky v kolekci [XmlAttribute] Serializuje vlastnost jako XML atribut [XmlText] Serializuje vlastnost jako textový obsah elementu [XmlEnum(\"Value1\")] Pojmenuje hodnotu enumu v XML [XmlType(\"MyClass\")] Pojmenuje třídu jako XML element [XmlInclude(typeof(...))] Umožní serializaci děděných tříd [XmlAnyElement] Libovolný XML element (typ XmlElement[]) [XmlAnyAttribute] Libovolný XML atribut (typ XmlAttribute[]) Note Pro detailní nastavení serializace využijte kombinaci atributů a metod."
  },
  "programming/packages/netCLI.html": {
    "href": "programming/packages/netCLI.html",
    "title": "\uD83D\uDE80 .NET CLI (Command Line Interface) | Vývojář",
    "summary": "\uD83D\uDE80 .NET CLI (Command Line Interface) \uD83D\uDEE0️ Pro práci je nutné mít nainstalovaný .NET SDK a .NET Runtime \uD83D\uDCE6 Umístění balíčků a nástrojů \uD83D\uDDA5️ Operační systém \uD83D\uDCC1 Cesta k nástrojům \uD83D\uDD0D Zjištění cesty ke spustitelnému souboru \uD83E\uDE9F Windows %USERPROFILE%\\.dotnet\\tools where dotnet \uD83D\uDC27 macOS / Linux ~/.dotnet/tools which dotnet \uD83E\uDDF0 Správa nástrojů (.NET Tools) ⚡ Akce \uD83C\uDF0D Globálně \uD83D\uDCC2 Lokálně Seznam nástrojů dotnet tool list -g dotnet tool list Instalace dotnet tool install -g <název_balíčku> dotnet tool install <název_balíčku> Zastaralé dotnet tool list -g --outdated dotnet tool list --outdated Aktualizace dotnet tool update -g <název_balíčku> dotnet tool update <název_balíčku> Odinstalace dotnet tool uninstall -g <název_balíčku> dotnet tool uninstall <název_balíčku> \uD83D\uDDC4️ Záloha a obnova globálních nástrojů \uD83D\uDD12 Záloha \uD83D\uDCCB Získejte seznam nainstalovaných nástrojů: dotnet tool list -g \uD83D\uDCDD Zaznamenejte názvy a verze pro pozdější obnovu. \uD83D\uDCBE Zálohujte adresář s nástroji: \uD83E\uDE9F Windows: %USERPROFILE%\\.dotnet\\tools \uD83D\uDC27 macOS / Linux: ~/.dotnet/tools ♻️ Obnova \uD83D\uDCC2 Zkopírujte zálohovaný adresář zpět na původní místo. \uD83D\uDD04 Restartujte terminál. ✅ Ověřte instalaci: dotnet tool list -g"
  },
  "programming/packages/npm.html": {
    "href": "programming/packages/npm.html",
    "title": "\uD83D\uDCE6 Správa npm balíčků | Vývojář",
    "summary": "\uD83D\uDCE6 Správa npm balíčků \uD83D\uDEE0️ Pro správu balíčků je potřeba mít nainstalovaný Node.js a npm. \uD83D\uDD04 Aktualizace balíčků \uD83C\uDD99 Jak správně aktualizovat balíčky? \uD83D\uDE80 Aktualizace Storybook: npx storybook@latest upgrade Použije nejnovější verzi Storybook a provede upgrade. \uD83D\uDD75️ Zjištění zastaralých balíčků: npm outdated Vypíše seznam balíčků, které mají novější verzi. \uD83D\uDEE0️ Aktualizace konkrétních balíčků: npm install vite@latest @sveltejs/vite-plugin-svelte@latest Nainstaluje nejnovější verze vybraných balíčků. \uD83D\uDCA1 Tip: Po aktualizaci spusťte projekt a ověřte funkčnost. Některé aktualizace mohou vyžadovat úpravy v konfiguraci nebo kódu. \uD83C\uDF0D Globální balíčky \uD83D\uDCC1 Kde najdu globální balíčky? \uD83D\uDDA5️ Operační systém \uD83D\uDCC2 Umístění globálních balíčků \uD83E\uDE9F Windows C:\\Users\\<user>\\AppData\\Roaming\\npm\\node_modules \uD83D\uDC27 Mac/Linux ~/.npm-global/lib/node_modules \uD83D\uDD0D Zjištění cesty příkazem: npm root -g \uD83D\uDCBE Záloha globálních balíčků \uD83D\uDDC4️ Jak zálohovat globální balíčky? Tento PowerShell skript zálohuje seznam globálních balíčků a stáhne je pro offline použití. # Vytvoření cesty k souboru se seznamem balíčků $packageListFilePath = Join-Path $PWD.Path 'npm_global_packages.txt' $outputFolder = Join-Path $PWD.Path 'offline_packages' # Uložení seznamu balíčků npm list -g --depth=0 | Out-File $packageListFilePath -Encoding utf8 # Vytvoření složky pro balíčky if (!(Test-Path $outputFolder)) { New-Item -ItemType Directory -Path $outputFolder | Out-Null } # Načtení balíčků a stažení .tgz souborů $content = Get-Content $packageListFilePath | Select-Object -Skip 1 foreach ($line in $content) { $line = $line.Trim() -replace '^[+`-]+\\s*', '' if ([string]::IsNullOrWhiteSpace($line)) { continue } $parts = $line -split '@' $packageName = $parts[0].Trim() $version = if ($parts.Length -gt 1) { $parts[1].Trim() } else { '' } $packageDir = Join-Path $outputFolder $packageName if (!(Test-Path $packageDir)) { New-Item -ItemType Directory -Path $packageDir | Out-Null } if ($version) { npm pack \"$packageName@$version\" --pack-destination $packageDir } else { npm pack $packageName --pack-destination $packageDir } } ♻️ Obnova balíčků z offline zálohy \uD83D\uDD04 Jak obnovit balíčky ze zálohy? Tento PowerShell skript nainstaluje všechny zálohované balíčky z offline složky. $packageFolder = Join-Path $PWD.Path 'offline_packages' $installBaseFolder = Join-Path $PWD.Path 'Installed' if (!(Test-Path $packageFolder)) { Write-Host \"Složka s offline balíčky nebyla nalezena.\" -ForegroundColor Red; exit } if (!(Test-Path $installBaseFolder)) { New-Item -ItemType Directory -Path $installBaseFolder } $tgzFiles = Get-ChildItem $packageFolder -Filter *.tgz -Recurse foreach ($tgzFile in $tgzFiles) { $packageName = [System.IO.Path]::GetFileNameWithoutExtension($tgzFile.Name) $installDir = Join-Path $installBaseFolder $packageName if (!(Test-Path $installDir)) { New-Item -ItemType Directory -Path $installDir } npm install --prefix $installDir $tgzFile.FullName } \uD83E\uDDE9 Aplikační balíčky \uD83D\uDCDC conventional-changelog-cli Slouží k automatickému generování changelogu na základě commit zpráv. \uD83D\uDE80 Instalace npm install -g conventional-changelog-cli \uD83D\uDCDD Generování changelogu conventional-changelog -p angular -i CHANGELOG.md -o CHANGELOG.md -s ⚙️ Parametr \uD83D\uDCA1 Význam -p / --preset Styl changelogu (angular, eslint, conventionalcommits) -i / --infile Vstupní soubor (např. CHANGELOG.md) -o / --outfile Výstupní soubor -r / --release-count Počet verzí pro generování --context Vlastní kontext pro šablonu changelogu --pkg Cesta k package.json --append Přidá změny na konec souboru --same-file Přepíše stejný soubor --tag-prefix Prefix k tagům verzí -n / --config Vlastní konfigurační soubor \uD83D\uDCA1 Tip: Pro vlastní šablonu použijte: conventional-changelog -i index.md -s --config ./changelog-config.js Příklad konfigurace s emoji Příklad konfigurace bez emoji"
  },
  "programming/packages/nugetPackage.html": {
    "href": "programming/packages/nugetPackage.html",
    "title": "\uD83D\uDCE6 NuGet Packages | Vývojář",
    "summary": "\uD83D\uDCE6 NuGet Packages \uD83D\uDEE0️ Pro správu balíčků je potřeba mít nainstalovaný NuGet CLI nebo používat integrované nástroje v IDE. \uD83D\uDDC2️ Správa balíčků \uD83D\uDD27 Způsoby správy balíčků \uD83D\uDCA1 Typ \uD83D\uDCC4 Popis \uD83D\uDD52 Používáno od/do packages.config Ukládá seznam všech balíčků v projektu včetně závislostí. Balíčky jsou kopírovány do složky projektu. Pomalejší buildy, větší repozitář. < 2017 PackageReference Balíčky se načítají přímo z globální složky. Závislosti se spravují automaticky. Rychlejší buildy, menší repozitář. 2017+ \uD83D\uDCDC Detaily packages.config Balíčky jsou uloženy v projektu (packages složka). Závislosti jsou explicitně uvedeny. Pomalejší buildy, větší velikost repozitáře. Používané před rokem 2017. ℹ️ Každý projekt má vlastní složku s balíčky, .csproj obsahuje pouze cesty. PackageReference Balíčky se nestahují do projektu, ale do globální složky. Závislosti se spravují automaticky. Rychlejší buildy, menší nároky na prostor. Výchozí formát od roku 2017. ℹ️ Balíčky jsou spravovány centrálně, projekt využívá globální umístění. \uD83C\uDF0D Globální složka balíčků \uD83D\uDCC1 Umístění globální složky \uD83D\uDDA5️ Operační systém \uD83D\uDCC2 Cesta k balíčkům \uD83E\uDE9F Windows %userprofile%\\.nuget\\packages \uD83D\uDC27 Mac/Linux ~/.nuget/packages \uD83D\uDCA1 Výchozí umístění lze změnit pomocí proměnné prostředí NUGET_PACKAGES."
  },
  "programming/packages/pythonPackage.html": {
    "href": "programming/packages/pythonPackage.html",
    "title": "\uD83D\uDC0D Python – Balíčky & Tipy | Vývojář",
    "summary": "\uD83D\uDC0D Python – Balíčky & Tipy \uD83D\uDE80 Praktické rady pro správu Python balíčků, zálohování, offline instalaci a užitečné příkazy. \uD83D\uDCE6 Co jsou Python balíčky? \uD83D\uDD0D Základní principy Balíčky rozšiřují možnosti Pythonu o nové knihovny a nástroje. Správa balíčků probíhá nejčastěji pomocí pip. Balíčky lze instalovat, zálohovat i používat offline. \uD83D\uDCBE Záloha balíčků \uD83D\uDDC2️ Jak zálohovat balíčky? Použij příkaz pro stažení balíčku a jeho závislostí do složky: pip download <název\\_balíčku> -d <cesta\\_k\\_adresáři> Všechny potřebné soubory se uloží do zvolené složky. Vhodné pro instalaci na počítač bez internetu. \uD83D\uDD04 Instalace balíčků ze zálohy \uD83D\uDEE0️ Offline instalace Nainstaluj balíčky ze zálohy pomocí: pip install --no-index --find-links <cesta\\_k\\_adresáři> --no-index zakáže hledání online. --find-links určí složku se staženými balíčky. Note Tento postup je ideální pro offline prostředí nebo firemní instalace."
  },
  "programming/techniques.html": {
    "href": "programming/techniques.html",
    "title": "\uD83E\uDDD1‍\uD83D\uDCBB Vývojové metodiky & Konvence pojmenování | Vývojář",
    "summary": "\uD83E\uDDD1‍\uD83D\uDCBB Vývojové metodiky & Konvence pojmenování \uD83D\uDE80 Praktické rady pro vývoj softwaru, metodiky řízení projektů, rychlé prototypování a pojmenování v kódu. \uD83D\uDDC2️ Vývojové metodiky ⚡ Agilní metodika (Scrum) Zaměření na spolupráci, zákaznickou spokojenost a rychlou reakci na změny. Práce v krátkých iteracích – sprinty (2-4 týdny). Průběžné testování a zpětná vazba. Warning Nevhodné pro projekty s pevným plánem a jasně definovanými výstupy. Kroky Scrum: \uD83D\uDCDD Plánování sprintu Tým vybírá úkoly z backlogu a plánuje jejich provedení. \uD83D\uDCBB Vývoj & Daily Scrum Denní schůzky, průběžné testování, řešení překážek. \uD83D\uDD0D Revize sprintu Prezentace výsledků zákazníkovi, získání zpětné vazby. \uD83D\uDD04 Retrospektiva Zhodnocení procesu, návrhy na zlepšení. \uD83D\uDCA7 Vodopádová metodika Postupné dokončování fází: analýza, návrh, implementace, testování, nasazení, údržba. Každá fáze musí být dokončena před začátkem další. Warning Délka fází závisí na velikosti projektu a týmu. Kroky Vodopádu: \uD83D\uDD0E Analýza požadavků Shromažďování a analýza potřeb zákazníka. \uD83D\uDCDD Návrh Plánování struktury a funkcí systému. \uD83D\uDCBB Implementace Převod návrhu do zdrojového kódu. \uD83E\uDDEA Testování Ověření funkčnosti a hledání chyb. \uD83D\uDE80 Nasazení Přechod do produkčního prostředí. \uD83D\uDD27 Údržba Opravy, vylepšení, sledování výkonu. \uD83D\uDDC3️ Kanban Vizuální řízení práce pomocí tabule a karet. Průběžná dodávka, omezení práce v průběhu (WIP). Warning Nevhodné pro projekty s pevnými termíny. Kroky Kanban: \uD83D\uDCDD Definování úkolů Seznam úkolů na kartách. \uD83D\uDCCA Vizualizace práce Tabule rozdělená na sloupce (Backlog, Todo, Done...). \uD83D\uDCBB Práce na úkolech Přesouvání karet podle stavu. \uD83D\uDD04 Omezení WIP Omezení počtu rozpracovaných úkolů. \uD83D\uDCC8 Průběžné zlepšování Pravidelné hodnocení procesu a úpravy. \uD83D\uDE80 Rychlé prototypování \uD83E\uDDE9 Postup prototypování Definice konceptu – jasná představa, klíčové mechaniky a cíle. Vytvoření základní scény – např. v Unity. Přidání objektů – krychle, koule, válce pro reprezentaci prvků. Implementace mechanik – skriptování, základní funkce. Testování & iterace – získání zpětné vazby, úpravy. Opakování cyklu – iterativní vylepšování. Important Cílem je funkční model, ne dokonalý produkt. Rychlost a zpětná vazba jsou klíčové. \uD83C\uDFF7️ Pojmenování BEM & Konvence v kódu \uD83E\uDDE9 BEM metodika BEM = Block Element Modifier – strukturované pojmenování tříd v HTML/CSS. <div class=\"block\"> <div class=\"block__element\"></div> <div class=\"block__element--modifier\"></div> </div> .block { ... } .block__element { ... } .block__element--modifier { ... } Typ Popis Block Samostatná entita (např. header, menu) Element Část bloku (menu item, list item) Modifier Varianta bloku/prvku (disabled, checked) Blok/element: __, modifikátor: -- \uD83D\uDCDD Konvence pojmenování v kódu \uD83D\uDD24 Jasné názvy Používejte popisné názvy, vyhněte se zkratkám. \uD83D\uDD12 Boolovské proměnné Začínejte předponou: `is`, `has`, `can` (např. `isAvailable`). ⚡ Názvy funkcí Začínejte slovesem: `getUserName()`, `calculateTotalPrice()`. \uD83D\uDD17 Konzistentní styl Dodržujte jednotný styl (např. `camelCase`). \uD83D\uDCDA Plurál pro kolekce Používejte množné číslo pro pole: `users`, `products`. \uD83D\uDD22 Konstanty pro magické hodnoty Nahraďte magické hodnoty pojmenovanými konstantami."
  },
  "programming/unity.html": {
    "href": "programming/unity.html",
    "title": "\uD83C\uDFAE Unity – Základy & Tipy pro rychlý start | Vývojář",
    "summary": "\uD83C\uDFAE Unity – Základy & Tipy pro rychlý start \uD83D\uDE80 Praktické rady pro efektivní práci v Unity, rychlé prototypování a výběr správného typu projektu. ⚡ Rychlejší spuštění hry ⏩ Jak zrychlit vstup do Play módu? \uD83C\uDFF7️ Možnost \uD83D\uDCA1 Popis \uD83D\uDD04 Reload Domain Znovunačte všechny skripty – jistota změn, ale pomalejší spuštění. \uD83D\uDD01 Reload Scene Znovunačte aktuální scénu – vhodné pro čistý stav, může zpomalit start. Pokud tyto možnosti vypneš, Unity se vyhne časově náročným procesům a Play mód se spustí rychleji. \uD83D\uDD79️ Výběr typu hry: 2D vs 3D \uD83C\uDFAC Video: Jak vybrat 2D nebo 3D projekt? \uD83D\uDE80 Rychlé prototypování ⚡ Video: Jak rychle prototypovat v Unity? \uD83D\uDDDD️ Klíčová slova v Unity \uD83D\uDD0D Video: Důležitá klíčová slova v Unity \uD83C\uDFD7️ Vývojové vzory v Unity \uD83E\uDDE9 Video: Nejčastější vývojové vzory"
  },
  "programming/unity/2d.html": {
    "href": "programming/unity/2d.html",
    "title": "\uD83D\uDDBC️ Unity 2D – Tilemap, Sprity & Tipy | Vývojář",
    "summary": "\uD83D\uDDBC️ Unity 2D – Tilemap, Sprity & Tipy \uD83D\uDE80 Praktické rady pro práci s 2D grafikou v Unity, nastavení Tilemap, velikosti obrázků, animace a řešení běžných problémů. \uD83E\uDDE9 Tilemap vs Sprite Renderer \uD83D\uDDFA️ Tilemap \uD83C\uDFA8 Vykreslení a nastavení barvy dlaždic ⚠️ Kód funguje pouze pokud je rozdělen do dvou cyklů. public void GenerateTilemap(int width, int height, Color color) { // Smazání všech dlaždic this.ClearTiles(); for (int x = 0; x < width; x++) for (int y = 0; y < height; y++) { this.Tilemap.SetTile(new(x, y, 0), this.TileBase); } for (int x = 0; x < width; x++) for (int y = 0; y < height; y++) { this.Tilemap.SetColor(new(x, y, 0), color); } } \uD83D\uDCCF Pravidla pro Tilemap \uD83D\uDDBC️ Velikost obrázku \uD83D\uDCD0 Definice velikostí \uD83D\uDCCF Rozměr \uD83D\uDCA1 Použití \uD83D\uDC41️ Vzdálenost od kamery 16x16 px Ikony, jednoduché UI Velmi daleko, detail není důležitý 32x32 px Malé UI prvky, ikony Velmi daleko 64x64 px Menší objekty Střední vzdálenost 128x128 px Střední objekty Blízká vzdálenost 256x256 px Větší objekty, detailní textury Střední až blízká vzdálenost 512x512 px Velmi detailní objekty Blízká vzdálenost 1024x1024 px Velké objekty, textury Velmi blízká vzdálenost 2048x2048+ px Maximální detail Extrémně blízká vzdálenost \uD83D\uDCCC Používejte mocniny čísla 2 pro optimální výkon. ⚙️ Nastavení velikosti (PPU) ⚠️ Pixel Per Unit (PPU) určuje, kolik pixelů tvoří jednu jednotku v Unity. Nastavte podle velikosti grafiky pro správné zobrazení. \uD83D\uDDBC️ Rozměr spritu ⚙️ PPU \uD83D\uDCCF Výsledek na scéně 32x32 px 32 1x1 jednotka 256x256 px 256 1x1 jednotka Pro více informací reddit: Jakou velikost spritů použít? \uD83C\uDFAC Animace obrázku \uD83E\uDDB4 Hloubka (Depth) u kostí \uD83D\uDDDD️ Hloubka ovlivňuje pořadí vykreslení Sprite Mesh. Otevři Sprite Editor Přepni do Skinning Editor Nastav hloubku u kostí \uD83E\uDDB4 Univerzální Rigging Otevři Sprite Editor Přepni do Skinning Editor (aktivuj Visibility) Vytvoř kosti (bones) Nastav Geometry a Weights ⚠️ Pokud se část nevykresluje barevně, zkontroluj nastavení posuvníků: Zkopíruj rig Otevři nový sprite Vlož rig \uD83D\uDEE0️ Řešení chyb při vykreslování sprite \uD83D\uDFE2 Na kameře musí být komponenta Pixel Perfect Camera pro 2D! \uD83D\uDDA4 Černé čáry Řešení: Zkontroluj umístění obrázku Nastav padding v TexturePacker \uD83C\uDFF7️ Typ paddingu \uD83D\uDCA1 Popis Border padding Mezera kolem okrajů celého sheetu Shape padding Mezera mezi jednotlivými sprites na sheetu \uD83D\uDCCC Zvyš padding, pokud se problém opakuje. ✨ Problikávání Zkontroluj měřítko v herním okně, že je nastaveno na 1x."
  },
  "programming/unity/animation.html": {
    "href": "programming/unity/animation.html",
    "title": "\uD83E\uDDB4 UMotion – Klíčování animací v Unity | Vývojář",
    "summary": "\uD83E\uDDB4 UMotion – Klíčování animací v Unity \uD83D\uDE80 Praktické tipy pro efektivní práci s UMotion při ukládání změn animací. \uD83D\uDCBE Uložení změn v UMotion \uD83D\uDD11 Jak klíčovat změny? \uD83C\uDFF7️ Způsob \uD83D\uDCA1 Popis Key Selected Vytvoř nebo uprav klíče pro vybrané kosti/transformace. Auto Key UMotion automaticky klíčuje změny při úpravě. Key Dialog Přehledně zobrazí změny a umožní je klíčovat. \uD83D\uDCDD Postup klíčování \uD83E\uDDB4 Krok za krokem Vyber kosti nebo transformace, které chceš animovat. Použij Key Selected pro ruční klíčování, nebo aktivuj Auto Key pro automatické klíčování. Otevři Key Dialog pro kontrolu a úpravu klíčů. Ulož změny animace."
  },
  "programming/unity/camera.html": {
    "href": "programming/unity/camera.html",
    "title": "\uD83C\uDFA5 Unity – Kamera & Tipy | Vývojář",
    "summary": "\uD83C\uDFA5 Unity – Kamera & Tipy \uD83D\uDE80 Praktické rady pro nastavení kamery v Unity, rozdíly mezi ortografickou a perspektivní kamerou, a proč používat Pixel Perfect Camera v 2D hrách. \uD83D\uDDBC️ Pixel Perfect Camera \uD83D\uDFE2 Proč ji použít v 2D? Zabrání deformacím a trhání obrazu. Zajistí ostré vykreslení pixelové grafiky. Doporučeno pro všechny 2D projekty. \uD83D\uDCCC Přidej komponentu Pixel Perfect Camera na hlavní kameru v Inspectoru. \uD83D\uDFE6 Ortografická Kamera \uD83D\uDCCF Vlastnosti & použití \uD83C\uDFF7️ Vlastnost \uD83D\uDCA1 Popis Zobrazení Objektivní, bez perspektivního zkreslení Velikost objektů Stejná bez ohledu na vzdálenost Použití 2D hry, izometrie, architektura Nastavení Orthographic Size určuje záběr Linie Rovnoběžné linie zůstávají rovnoběžné Ideální pro 2D projekty! \uD83D\uDFE9 Perspektivní Kamera \uD83D\uDD2D Vlastnosti & použití \uD83C\uDFF7️ Vlastnost \uD83D\uDCA1 Popis Zobrazení Simuluje reálnou perspektivu Velikost objektů Menší s rostoucí vzdáleností Použití 3D hry, realistická hloubka Nastavení Field of View (FOV) určuje šířku záběru Linie Rovnoběžné linie se sbíhají do jednoho bodu Vhodné pro 3D projekty! \uD83C\uDD95 Novinky & Video \uD83C\uDFAC Co je nového v Unity kamerách?"
  },
  "programming/unity/navigation.html": {
    "href": "programming/unity/navigation.html",
    "title": "\uD83E\uDDED Unity – Navigační systém & Tipy | Vývojář",
    "summary": "\uD83E\uDDED Unity – Navigační systém & Tipy \uD83D\uDE80 Praktické rady pro nastavení navigace, pohyb postav a využití NavMesh v Unity. \uD83D\uDDFA️ Co je Navigační systém? \uD83D\uDD0D Základní principy Umožňuje postavám najít cestu v herním světě. Využívá NavMesh – speciální mapu pro navigaci. Řeší překážky, optimalizuje trasu a umožňuje dynamický pohyb. \uD83D\uDEE0️ Nastavení NavMesh v Unity ⚙️ Jak vytvořit NavMesh? Označ objekty, po kterých se má chodit (Walkable). Přidej komponentu NavMesh Surface. Klikni na Bake pro vygenerování navigační mapy. \uD83D\uDCCC Pro dynamické prostředí použij NavMesh Obstacle. \uD83D\uDEB6‍♂️ Pohyb postavy pomocí NavMesh Agent \uD83D\uDC63 Jak nastavit pohyb? Přidej komponentu NavMesh Agent na postavu. Nastav parametry (rychlost, akcelerace, radius). Pro pohyb použij skript: using UnityEngine; using UnityEngine.AI; public class MoveToTarget : MonoBehaviour { public Transform target; private NavMeshAgent agent; void Start() { agent = GetComponent<NavMeshAgent>(); } void Update() { agent.SetDestination(target.position); } } \uD83D\uDDDD️ Postava automaticky najde cestu k cíli. \uD83C\uDD95 Novinky & Video \uD83C\uDFAC Co je nového v navigaci?"
  },
  "programming/unity/renderer.html": {
    "href": "programming/unity/renderer.html",
    "title": "\uD83D\uDD8C️ Unity – Universal Render Pipeline (URP) & Tipy | Vývojář",
    "summary": "\uD83D\uDD8C️ Unity – Universal Render Pipeline (URP) & Tipy \uD83D\uDE80 Praktické rady pro nastavení URP, globální konfigurace, Volume efekty a optimalizaci renderování v Unity. \uD83C\uDF08 Co je Universal Render Pipeline (URP)? \uD83D\uDD0D Základní principy URP Moderní renderovací pipeline pro Unity. Vysoký výkon na různých platformách. Podpora pokročilých efektů a optimalizací. \uD83E\uDDE9 Default Volume Profile ✨ Výchozí efekty Volume Sada výchozích nastavení pro Volume efekty. Obsahuje efekty jako Bloom, Chromatic Aberration a další. Slouží jako základní profil pro post-processing. \uD83D\uDCCC Upravuj Volume profily podle vizuálních potřeb projektu. ⚙️ UniversalRenderPipelineGlobalSettings \uD83C\uDF10 Globální nastavení URP Určuje chování a vlastnosti URP v projektu. Nastavení pro HDR, barevné prostory, globální efekty. Ovlivňuje všechny scény v projektu. \uD83D\uDCCC Spravuj globální nastavení pro konzistentní vizuální styl. \uD83D\uDDC2️ URP Render Pipeline Asset \uD83D\uDEE0️ Hlavní konfigurace URP Asset pro detailní nastavení render pipeline. Nastavení kvality, efektů, optimalizace. Konfigurace antialiasingu, stínů, renderování obrazu. \uD83D\uDCCC Vytvoř a přiřaď URP asset v Graphics Settings. \uD83D\uDDBC️ URP Renderer Data \uD83C\uDFA8 Specifická nastavení rendereru Konfigurace pro jednotlivé renderery (např. Forward Renderer). Nastavení stínů, efektů, post-processingu na úrovni rendereru. Možnost různých rendererů pro různé typy objektů. \uD83D\uDCCC Využij různé renderer data pro specifické vizuální efekty."
  },
  "programming/unity/scriptableObject.html": {
    "href": "programming/unity/scriptableObject.html",
    "title": "\uD83D\uDCE6 Unity – ScriptableObject & Tipy | Vývojář",
    "summary": "\uD83D\uDCE6 Unity – ScriptableObject & Tipy \uD83D\uDE80 Praktické rady pro použití ScriptableObject v Unity, jejich výhody, omezení a moderní patterny. \uD83E\uDDE9 Co je ScriptableObject? \uD83D\uDD0D Základní principy ScriptableObject je speciální typ assetu v Unity. Umožňuje ukládat data mimo scénu – přímo v projektu. Vhodné pro konfigurace, globální data, nastavení, inventáře, atd. \uD83D\uDDC2️ Vytvoření ScriptableObject \uD83D\uDEE0️ Jak vytvořit ScriptableObject? Vytvoř novou C# třídu dědící ze ScriptableObject. Přidej atribut [CreateAssetMenu] pro snadné vytvoření assetu. Vytvoř asset přes Assets > Create v Unity. using UnityEngine; [CreateAssetMenu(fileName = \"NewConfig\", menuName = \"Config/Example\")] public class ExampleConfig : ScriptableObject { public int value; public string description; } \uD83D\uDCBE Ukládání & Obnovení dat ⚠️ Omezení ScriptableObject Data v ScriptableObject se neukládají mezi spuštěními hry. Po zavření a opětovném otevření hry se obnoví na výchozí hodnoty assetu. Pro trvalé ukládání použij PlayerPrefs, soubory nebo databázi. Important ScriptableObjects slouží hlavně pro konfiguraci a sdílení dat v rámci projektu, ne pro runtime ukládání. \uD83E\uDD84 Singleton pattern se ScriptableObject \uD83D\uDD11 Jak na singleton ScriptableObject? Umožňuje globální přístup k datům bez nutnosti vytvářet instanci ve scéně. Vhodné pro nastavení, globální konfigurace, eventy."
  },
  "programming/unity/ui.html": {
    "href": "programming/unity/ui.html",
    "title": "\uD83D\uDDA5️ Unity – UI systém & Tipy | Vývojář",
    "summary": "\uD83D\uDDA5️ Unity – UI systém & Tipy \uD83D\uDE80 Praktické rady pro práci s UI v Unity, včetně nastavení tlačítek, detekce kliknutí a užitečných vlastností komponent. \uD83E\uDDE9 Co je UI systém v Unity? \uD83D\uDD0D Základní principy UI Umožňuje vytvářet interaktivní prvky (tlačítka, texty, obrázky). Prvky UI jsou spravovány pomocí Canvas. Podporuje animace, eventy a dynamické změny. \uD83D\uDD18 Tlačítko (Button) \uD83D\uDDB1️ Vlastnosti tlačítka Tlačítko je základní interaktivní prvek UI. Lze mu přiřadit akce na kliknutí. Podporuje různé vizuální styly a animace. \uD83D\uDFE3 Rozsah detekce kliknutí podle průhlednosti \uD83E\uDE78 `alphaHitTestMinimumThreshold` \uD83C\uDFF7️ Vlastnost \uD83D\uDCA1 Popis alphaHitTestMinimumThreshold Určuje minimální alfa hodnotu pro detekci kliknutí na obrázek. Rozsah hodnot 0 (klik i na průhledné části) až 1 (jen zcela neprůhledné části) Použití Ideální pro kruhová nebo nepravidelná tlačítka \uD83D\uDCCC Nastav hodnotu podle požadované citlivosti na průhlednost. Příklad použití v C#: using UnityEngine; using UnityEngine.UI; public class ExampleClass : MonoBehaviour { public Image theButton; void Start() { theButton.alphaHitTestMinimumThreshold = 0.5f; } } Tip Vhodné například pro kruhová tlačítka, kde nechceme registrovat kliknutí na průhledné okraje."
  },
  "programming/unity/uiToolkit.html": {
    "href": "programming/unity/uiToolkit.html",
    "title": "\uD83E\uDDF0 Unity – UI Toolkit & Tipy | Vývojář",
    "summary": "\uD83E\uDDF0 Unity – UI Toolkit & Tipy \uD83D\uDE80 Praktické rady pro práci s UI Toolkit v Unity, jeho výhody, základní principy a moderní patterny. \uD83C\uDF1F Co je UI Toolkit? \uD83D\uDD0D Základní principy UI Toolkit Moderní systém pro tvorbu UI v Unity. Využívá UXML (markup) a USS (styly podobné CSS). Podporuje editor i runtime UI. Snadná tvorba responzivních a stylovaných rozhraní. \uD83D\uDEE0️ Jak začít s UI Toolkit? \uD83D\uDCE6 Základní kroky Vytvoř UXML soubor pro strukturu UI. Vytvoř USS soubor pro styly. Přidej UIDocument komponentu do GameObjectu ve scéně. Propoj soubory v Inspectoru. \uD83D\uDCCC UI Toolkit je vhodný pro editorové nástroje i herní UI. \uD83D\uDDBC️ UXML & USS – Příklad \uD83D\uDCDD Ukázka kódu UXML: <engine:UIDocument xmlns:ui=\"UnityEngine.UIElements\" xmlns:uie=\"UnityEditor.UIElements\"> <ui:Button text=\"Klikni mě!\" /> </engine:UIDocument> USS: Button { background-color: #1E90FF; color: white; font-size: 18px; border-radius: 8px; } Tip UXML definuje strukturu, USS vzhled – podobně jako HTML a CSS. \uD83C\uDD95 Novinky & Video \uD83C\uDFAC Co je nového v UI Toolkit?"
  },
  "programming/xampp/xampp_access.html": {
    "href": "programming/xampp/xampp_access.html",
    "title": "\uD83D\uDE80 Přístup k projektům v XAMPP | Vývojář",
    "summary": "\uD83D\uDE80 Přístup k projektům v XAMPP \uD83D\uDEE0️ Tento návod ukazuje, jak spravovat více projektů v XAMPP a pohodlně k nim přistupovat přes prohlížeč. \uD83D\uDD25 1. Spuštění Apache \uD83D\uDDA5️ Jak spustit Apache server? Otevřete XAMPP Control Panel. Klikněte na tlačítko Start u služby Apache. Ujistěte se, že běží (zelený stav). \uD83D\uDCA1 Doporučení: Spouštějte XAMPP jako administrátor pro správné oprávnění. \uD83D\uDCC1 2. Vytvoření složek pro projekty \uD83D\uDCE6 Jak organizovat projekty? Každý projekt vložte do vlastní složky v htdocs: \uD83C\uDFF7️ Projekt \uD83D\uDCC2 Umístění složky project1 C:\\xampp\\htdocs\\project1\\ project2 C:\\xampp\\htdocs\\project2\\ project3 C:\\xampp\\htdocs\\project3\\ \uD83D\uDCCC Složka htdocs je výchozí webový adresář Apache v XAMPP. \uD83C\uDF10 3. Přístup k projektům přes prohlížeč \uD83D\uDD17 Jak zobrazit projekty v prohlížeči? Otevřete prohlížeč a zadejte URL podle názvu složky: \uD83C\uDFF7️ Projekt \uD83C\uDF0D URL adresa project1 http://localhost/project1/ project2 http://localhost/project2/ project3 http://localhost/project3/ \uD83D\uDCA1 Každý projekt má vlastní URL pod localhost."
  },
  "programming/xampp/xampp_virtualhosts.html": {
    "href": "programming/xampp/xampp_virtualhosts.html",
    "title": "\uD83C\uDF10 Virtual Hosts v XAMPP | Vývojář",
    "summary": "\uD83C\uDF10 Virtual Hosts v XAMPP \uD83D\uDE80 Virtual Hosts umožňují přiřadit každému projektu vlastní doménu, např. project1.local, pro pohodlnější přístup a testování. \uD83D\uDEE0️ 1. Konfigurace Apache \uD83D\uDD27 Jak nastavit Virtual Hosts? Otevřete soubor: C:\\xampp\\apache\\conf\\extra\\httpd-vhosts.conf Přidejte bloky pro každý projekt: <VirtualHost *:80> DocumentRoot \"C:/xampp/htdocs/project1\" ServerName project1.local </VirtualHost> <VirtualHost *:80> DocumentRoot \"C:/xampp/htdocs/project2\" ServerName project2.local </VirtualHost> <VirtualHost *:80> DocumentRoot \"C:/xampp/htdocs/project3\" ServerName project3.local </VirtualHost> \uD83D\uDCDD 2. Úprava hosts souboru \uD83D\uDDA5️ Jak přidat domény do hosts? Otevřete soubor hosts jako administrátor: C:\\Windows\\System32\\drivers\\etc\\hosts Přidejte řádky: 127.0.0.1 project1.local 127.0.0.1 project2.local 127.0.0.1 project3.local \uD83D\uDD04 3. Restart Apache ♻️ Jak restartovat Apache? Otevřete XAMPP Control Panel. Klikněte na Stop a poté Start u služby Apache. Ujistěte se, že server běží (zelený stav). \uD83C\uDF0D 4. Přístup k projektům \uD83D\uDD17 Jak přistupovat k projektům? \uD83C\uDFF7️ Projekt \uD83C\uDF10 URL adresa project1 http://project1.local project2 http://project2.local project3 http://project3.local Každý projekt má vlastní \"friendly URL\" místo localhost/projectX."
  },
  "teamwork/outlook.html": {
    "href": "teamwork/outlook.html",
    "title": "\uD83D\uDDC2️ Outlook – Praktický průvodce kalendářem & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ Outlook – Praktický průvodce kalendářem & tipy \uD83D\uDE80 Moderní přehled funkcí zobrazení kalendáře, sloučení panelů a doporučení pro práci v Outlooku. \uD83D\uDCD6 Zobrazení kalendáře \uD83D\uDD04 Sloučení/Oddělení panelů kalendáře View ➡ Overlay Umožňuje zobrazit více kalendářů v jednom okně nebo odděleně. \uD83D\uDDC2️ Oddělené zobrazení kalendářů Každý kalendář se zobrazí v samostatném okně. \uD83D\uDD17 Sloučené zobrazení kalendářů Všechny kalendáře se zobrazí v jednom okně."
  },
  "vcs/git/branches/createRemoteBranch.html": {
    "href": "vcs/git/branches/createRemoteBranch.html",
    "title": "\uD83D\uDDC2️ Git – Vytvoření & push nové větve na remote | Vývojář",
    "summary": "\uD83D\uDDC2️ Git – Vytvoření & push nové větve na remote \uD83D\uDE80 Praktické rady pro založení a umístění nové větve (develop) na Git server (např. GitHub, GitLab). \uD83C\uDF31 Vytvoření nové větve \uD83D\uDEE0️ Krok 1: Založení větve git checkout -b develop Vytvoří novou větev develop a přepne na ni. \uD83C\uDF10 Nastavení vzdáleného repozitáře \uD83D\uDD17 Krok 2: Ověření remote git remote -v Zobrazí nastavené vzdálené repozitáře. Note Pokud není remote nastaven, použij: git remote add origin <url> \uD83D\uDE80 Push větve na server \uD83D\uDCE4 Krok 3: Push větve na remote git push -u origin develop Nahraje větev develop na server a nastaví ji jako sledovanou vůči origin/develop. Note Parametr -u zajistí automatické sledování větve. \uD83D\uDDA5️ Ověření online \uD83D\uDD0E Krok 4: Kontrola na webu Otevři webové rozhraní (GitHub, GitLab apod.) a ověř, že se větev objevila mezi vzdálenými větvemi."
  },
  "vcs/git/branches/deleteRemoteBranch.html": {
    "href": "vcs/git/branches/deleteRemoteBranch.html",
    "title": "\uD83D\uDDC2️ Git – Smazání vzdálené větve | Vývojář",
    "summary": "\uD83D\uDDC2️ Git – Smazání vzdálené větve \uD83D\uDE80 Praktické rady pro bezpečné odstranění větve z Git serveru (např. GitHub, GitLab). ⚠️ Upozornění Warning Smazání vzdálené větve je nevratná operace. Ujisti se, že větev už nepotřebuješ a všechny důležité změny jsou začleněny jinde. \uD83D\uDCCB Postup krok za krokem \uD83D\uDD0E Krok 1: Zobrazení všech větví git branch -a Zobrazí seznam lokálních i vzdálených větví. \uD83D\uDDD1️ Krok 2: Smazání vzdálené větve git push origin --delete <nazev-vetve> # nebo kratší varianta git push origin :<nazev-vetve> Nahraď <nazev-vetve> skutečným názvem větve, kterou chceš smazat. Note Obě varianty provedou totéž – smažou větev na serveru. \uD83E\uDDF9 Krok 3: Vyčištění lokálních referencí git fetch --prune Odstraní lokální reference na smazané vzdálené větve. Tip Tento krok není povinný, ale pomáhá udržet repozitář přehledný."
  },
  "vcs/git/branches/pullRequest.html": {
    "href": "vcs/git/branches/pullRequest.html",
    "title": "\uD83D\uDDC2️ Git – Pull Request (PR) | Vývojář",
    "summary": "\uD83D\uDDC2️ Git – Pull Request (PR) \uD83D\uDE80 Praktické rady, jak funguje Pull Request, kdy a proč ho použít. \uD83D\uDD0E Co je Pull Request? Pull Request (PR) je žádost o začlenění změn z jedné větve do jiné (typicky z feature do main nebo develop). Umožňuje týmovou kontrolu, diskusi, testování a schválení změn před sloučením. \uD83E\uDDE9 Typický workflow PR \uD83D\uDCDD Krok 1: Vytvoření nové větve git checkout -b feature/nova-funkce # Vývoj, commity... git push origin feature/nova-funkce Větev pushni na remote, aby byla dostupná pro PR. \uD83D\uDD17 Krok 2: Vytvoření PR na serveru Otevři webové rozhraní (GitHub, GitLab, Bitbucket). Vyber zdrojovou (feature/nova-funkce) a cílovou (main/develop) větev. Přidej popis změn, případně označ recenzenty. Tip Popiš stručně, co PR řeší a proč je důležitý. \uD83D\uDC40 Krok 3: Code review & testy Tým provede code review – komentáře, návrhy, schválení. Automaticky se spustí CI/CD pipeline (testy, build). Případné úpravy proveď v původní větvi, PR se automaticky aktualizuje. Note Review zvyšuje kvalitu kódu a snižuje riziko chyb. ✅ Krok 4: Schválení & merge PR Po schválení a úspěšných testech lze PR sloučit (merge). Většina platforem nabízí různé typy merge: Merge commit (zachová historii) Squash (sloučí commity do jednoho) Rebase (přepíše historii) Important Po merge PR se obvykle maže zdrojová větev. \uD83D\uDCCB Výhody Pull Requestu ✅ Proč používat PR? Týmová kontrola a diskuse nad změnami Automatizované testy před sloučením Jasná historie, kdo co schválil Možnost auditovat změny zpětně Zvyšuje kvalitu a bezpečnost kódu"
  },
  "vcs/git/gitConfig.html": {
    "href": "vcs/git/gitConfig.html",
    "title": "\uD83D\uDDC2️ Git – Nastavení porovnávání & slučování přes Meld | Vývojář",
    "summary": "\uD83D\uDDC2️ Git – Nastavení porovnávání & slučování přes Meld \uD83D\uDE80 Praktické rady pro konfiguraci nástroje Meld jako diff/merge tool v Git na Windows i Linuxu. \uD83D\uDD0D Co je Meld? Meld je vizuální nástroj pro porovnávání a slučování souborů. Umožňuje přehledné zobrazení rozdílů a snadné řešení konfliktů. ⚙️ Nastavení Meld jako diff/merge tool \uD83D\uDCBB Windows – Kompletní postup Nainstalujte Meld Stáhnout Meld pro Windows Nastavte Git pro použití Meld: git config --global diff.tool meld git config --global difftool.meld.path \"C:\\Program Files\\Meld\\Meld.exe\" git config --global difftool.prompt false git config --global merge.tool meld git config --global mergetool.meld.path \"C:\\Program Files\\Meld\\Meld.exe\" git config --global mergetool.prompt false Note Cestu k Meld.exe upravte podle umístění instalace. \uD83D\uDC27 Linux – Kompletní postup Nainstalujte Meld sudo apt install meld Nastavte Git pro použití Meld: git config --global diff.tool meld git config --global difftool.meld.path \"/usr/bin/meld\" git config --global difftool.prompt false git config --global merge.tool meld git config --global mergetool.meld.path \"/usr/bin/meld\" git config --global mergetool.prompt false \uD83D\uDCDD Použití v praxi \uD83D\uDD0E Porovnání změn Spusťte porovnání souborů: git difftool \uD83D\uDD00 Řešení konfliktů při slučování Spusťte nástroj pro slučování: git mergetool"
  },
  "vcs/git/gitFlow.html": {
    "href": "vcs/git/gitFlow.html",
    "title": "\uD83D\uDDC2️ Git Flow – Strategie větvení & workflow | Vývojář",
    "summary": "\uD83D\uDDC2️ Git Flow – Strategie větvení & workflow \uD83D\uDE80 Praktické rady pro efektivní správu větví v týmu pomocí Git Flow. \uD83D\uDD0E Co je Git Flow? Git Flow je osvědčená strategie pro řízení verzí a vývoj v týmech. Umožňuje jasně oddělit vývoj, přípravu vydání a opravy chyb. \uD83C\uDF33 Hlavní větve \uD83D\uDFE2 Základní větve main (nebo master): Produkční verze kódu develop: Připravované změny pro další vydání \uD83D\uDEE0️ Pomocné větve feature/*: Vývoj nových funkcí release/*: Příprava vydání hotfix/*: Rychlé opravy v produkci \uD83C\uDFD7️ Typické workflow ✨ Vývoj nové funkce git checkout develop git checkout -b feature/nova-funkce # Vývoj... git checkout develop git merge feature/nova-funkce Note Vždy vytvářejte feature větve z aktuální develop větve. \uD83D\uDE80 Příprava vydání git checkout develop git checkout -b release/1.0.0 # Finalizace... git checkout main git merge release/1.0.0 git checkout develop git merge release/1.0.0 git tag -a v1.0.0 -m \"Verze 1.0.0\" Tip V release větvích provádějte pouze opravy chyb, úpravy dokumentace a metadat. \uD83E\uDE79 Oprava chyby v produkci git checkout main git checkout -b hotfix/oprava-chyby # Oprava... git checkout main git merge hotfix/oprava-chyby git tag -a v1.0.1 -m \"Oprava 1.0.1\" git checkout develop git merge hotfix/oprava-chyby Important Hotfixy vždy slučujte do main i develop! \uD83D\uDCCB Pravidla pro práci s Git Flow \uD83D\uDCDD Doporučené postupy Nikdy nepracujte přímo v main ani develop Každá funkce má vlastní feature větev Před sloučením proveďte code review Po sloučení release/hotfix větve označte verzi pomocí tagu Používejte smysluplné názvy větví (např. feature/user-auth) Udržujte commit zprávy jasné a popisné \uD83D\uDDFA️ Vizualizace workflow \uD83D\uDCC8 Schéma větvení main ●────────●─────────●────────● \\ \\ \\ \\ develop ●─────●───●─────●───●───●────● \\ / / / feature ●───● / / / / release ●─────● / hotfix ●"
  },
  "vcs/git/history/deleteCommits.html": {
    "href": "vcs/git/history/deleteCommits.html",
    "title": "\uD83D\uDDC2️ Git – Nahrazení vzdálené větve z lokální větve | Vývojář",
    "summary": "\uD83D\uDDC2️ Git – Nahrazení vzdálené větve z lokální větve \uD83D\uDE80 Praktický návod, jak kompletně nahradit historii vzdálené větve pomocí nové lokální větve. \uD83D\uDCDD Kdy použít tento postup? Chceš začít s čistou historií commitů (např. po refaktoringu). Potřebuješ odstranit veškerou předchozí historii z hlavní větve (main/master). Vhodné pro projekty, kde je nutné kompletní \"reset\" repozitáře. \uD83D\uDCCB Postup krok za krokem \uD83C\uDF31 Krok 1: Vytvoření nové větve bez historie git checkout --orphan latest_branch Vytvoří novou větev bez historie commitů. Note --orphan znamená, že větev nemá žádné předchozí commity. \uD83D\uDCE5 Krok 2: Přidání všech souborů git add -A Přidá všechny soubory do stage. ✅ Krok 3: První commit git commit -am \"Initialize commit\" Vytvoří první commit v nové větvi. Tip -am je zkrácený zápis pro --all a --message. \uD83D\uDDD1️ Krok 4: Smazání původní hlavní větve git branch -D main Smaže hlavní větev (main nebo master). Warning Ověř název hlavní větve před smazáním! \uD83D\uDD04 Krok 5: Přejmenování nové větve na hlavní git branch -m main Přejmenuje aktuální větev na main. Warning Použij správný název hlavní větve. \uD83D\uDE80 Krok 6: Force push do vzdáleného repozitáře git push -f origin main Nahraje novou historii do vzdáleného repozitáře. Tip -f (force) přepíše historii na serveru."
  },
  "vcs/git/history/fixCommits.html": {
    "href": "vcs/git/history/fixCommits.html",
    "title": "\uD83D\uDDC2️ Git – fixup! & squash! commity | Vývojář",
    "summary": "\uD83D\uDDC2️ Git – fixup! & squash! commity \uD83D\uDE80 Praktické rady, jak efektivně opravovat a slučovat commity pomocí fixup! a squash! v Gitu. \uD83D\uDEE0️ Co znamená fixup! a squash!? fixup! – vytvoří commit, který opravuje předchozí commit bez změny jeho zprávy. squash! – vytvoří commit, který sloučí zprávu s původním commitem. \uD83D\uDCCB Postup krok za krokem \uD83D\uDD27 Krok 1: Vytvoření opravného commitu Použití fixup!: git commit --fixup <hashId> nebo git commit -m \"fixup! <hashId> notUsedMessage\" Note <hashId> je ID commitu, který chcete opravit. Použití squash!: git commit -m \"squash! <hashId> optionalCustomMessage\" Tip squash! umožňuje přidat vlastní zprávu ke sloučení. \uD83D\uDD04 Krok 2: Rebase s automatickým sloučením git rebase -i --autosquash HEAD~<n> Spustí interaktivní rebase s automatickým zařazením fixup! a squash! commitů. Note <n> je počet posledních commitů, které chcete upravit. \uD83D\uDCDD Krok 3: Úprava v editoru Otevře se textový editor s přehledem commitů. Proveďte potřebné změny, uložte soubor a zavřete editor. Tip Po zavření editoru se rebase automaticky dokončí a opravy/sloučení se aplikují."
  },
  "vcs/git/history/moveCommits.html": {
    "href": "vcs/git/history/moveCommits.html",
    "title": "\uD83D\uDDC2️ Git – Přesun commitů do nové nebo existující větve | Vývojář",
    "summary": "\uD83D\uDDC2️ Git – Přesun commitů do nové nebo existující větve \uD83D\uDE80 Praktické rady, jak přesunout poslední commity ze jedné větve do nové nebo existující větve. \uD83C\uDF31 Přesun commitů do nové větve \uD83D\uDEE0️ Krok 1: Vytvoření nové větve z aktuální git checkout master git branch newbranch git checkout master Přepne se do zdrojové větve (master), vytvoří novou větev (newbranch) se stejnou historií. \uD83E\uDDF9 Krok 2: Odstranění commitů ze zdrojové větve git reset --hard HEAD~3 Odstraní poslední 3 commity ze zdrojové větve (master). Warning Tento krok je nevratný – commity budou ze zdrojové větve smazány. \uD83D\uDD00 Krok 3: Přepnutí do nové větve git checkout newbranch Nová větev obsahuje původní commity, které byly odstraněny ze zdrojové větve. \uD83D\uDD04 Přesun commitů do existující větve \uD83D\uDD17 Krok 1: Merge commitů do cílové větve git checkout existingbranch git merge branchToMoveCommitFrom Přepne se do cílové větve (existingbranch) a sloučí commity ze zdrojové větve (branchToMoveCommitFrom). \uD83E\uDDF9 Krok 2: Odstranění commitů ze zdrojové větve git checkout branchToMoveCommitFrom git reset --hard HEAD~3 Odstraní poslední 3 commity ze zdrojové větve. Warning Tento krok je nevratný – commity budou ze zdrojové větve smazány. \uD83D\uDD00 Krok 3: Přepnutí do cílové větve git checkout existingbranch Pokračuj v práci na cílové větvi s přesunutými commity. Note Více informací najdeš v diskuzi na Stack Overflow."
  },
  "vcs/git/history/updateGitignore.html": {
    "href": "vcs/git/history/updateGitignore.html",
    "title": "\uD83D\uDDC2️ Git – Aktualizace .gitignore & odstranění mezipaměti | Vývojář",
    "summary": "\uD83D\uDDC2️ Git – Aktualizace .gitignore & odstranění mezipaměti \uD83D\uDE80 Praktické rady, jak správně aktualizovat .gitignore a odstranit již sledované soubory z Git mezipaměti. \uD83D\uDCDD Proč aktualizovat .gitignore? .gitignore určuje, které soubory Git nemá sledovat. Po změně je nutné odstranit již sledované soubory z mezipaměti, aby se ignorovaly. \uD83D\uDCCB Postup krok za krokem \uD83E\uDDF9 Krok 1: Odstranění mezipaměti sledovaných souborů git rm -r --cached . Odstraní všechny soubory z mezipaměti (ne z disku). Git začne respektovat nové pravidla v .gitignore. Warning Soubory zůstanou na disku, pouze se přestanou sledovat v Gitu. \uD83D\uDCE5 Krok 2: Přidání změn do stage git add . Přidá změny (včetně aktualizovaného .gitignore) do stage. Tip Ověřte, že .gitignore obsahuje vše potřebné. ✅ Krok 3: Commit změn git commit -m \"Aktualizace .gitignore\" Potvrďte změny v repozitáři. Note Po commitu budou ignorované soubory skutečně ignorovány."
  },
  "vcs/git/repository.html": {
    "href": "vcs/git/repository.html",
    "title": "\uD83D\uDDC2️ Git – Práce s úložištěm | Vývojář",
    "summary": "\uD83D\uDDC2️ Git – Práce s úložištěm \uD83D\uDE80 Praktické rady pro vytvoření a použití Git úložiště na lokálním i online prostředí. \uD83C\uDFD7️ Vytvoření úložiště \uD83D\uDEE0️ Kompletní postup Inicializace bare úložiště Spusťte v terminálu: git init --bare <cesta> <cesta> = cílová složka, musí končit .git Např.: C:\\projekty\\moje-repozitar.git Warning Cesta musí mít na konci .git, jinak nebude úložiště správně rozpoznáno. \uD83D\uDCE5 Klonování úložiště \uD83D\uDD17 Použití v pracovním prostředí Klonování úložiště Spusťte v terminálu: git clone <cesta> <cesta> = adresa k úložišti (lokální nebo online), musí končit .git Např.: C:\\projekty\\moje-repozitar.git nebo https://github.com/uzivatel/projekt.git Tip Cestu lze použít jak lokální, tak online (např. GitHub, GitLab)."
  },
  "vcs/git/submodules.html": {
    "href": "vcs/git/submodules.html",
    "title": "\uD83D\uDDC2️ Git – Submoduly: Přehled & použití | Vývojář",
    "summary": "\uD83D\uDDC2️ Git – Submoduly: Přehled & použití \uD83D\uDE80 Praktické rady pro správu externích repozitářů pomocí submodulů v Git. \uD83D\uDD0E Co jsou submoduly? Umožňují vložit jeden Git repozitář do jiného jako podadresář. Zachovávají nezávislost obou repozitářů. Vhodné pro správu závislostí, sdílený kód nebo více projektů najednou. \uD83C\uDFD7️ Struktura projektu se submodulem \uD83D\uDCC1 Ukázková struktura HlavniProjekt/ ├── .git/ ├── .gitmodules ├── BeznyAdresar/ └── Submodul/ └── .git/ ⚙️ Základní příkazy ➕ Přidání submodulu git submodule add https://github.com/uzivatel/knihovna libs/knihovna \uD83D\uDCE5 Klonování projektu se submoduly Vše najednou: git clone --recursive https://github.com/uzivatel/projekt Postupně: git clone https://github.com/uzivatel/projekt git submodule init git submodule update \uD83D\uDD04 Aktualizace submodulů Všechny submoduly: git submodule update --remote Konkrétní submodul: cd cesta/k/submodulu git checkout main git pull cd ../.. git add cesta/k/submodulu git commit -m \"Aktualizován submodul na nejnovější verzi\" \uD83C\uDFAE Praktický příklad v Unity projektu \uD83E\uDDE9 Struktura & přidání submodulů UnityProjekt/ ├── .git/ ├── .gitmodules └── Assets/ ├── Game/ └── Plugins/ ├── UI-Framework/ └── Network/ cd UnityProjekt git init git submodule add https://github.com/author/ui-framework Assets/Plugins/UI-Framework git submodule add https://github.com/author/network-lib Assets/Plugins/Network \uD83D\uDCA1 Tipy pro práci se submoduly \uD83D\uDD00 Přepínání verzí submodulu cd cesta/k/submodulu git checkout v2.0.0 cd ../.. git add cesta/k/submodulu git commit -m \"Změněna verze submodulu na v2.0.0\" ✏️ Úpravy v submodulu cd cesta/k/submodulu git checkout -b oprava-chyby # proveďte změny git commit -am \"Oprava chyby\" git push origin oprava-chyby # vytvořte pull request v repozitáři submodulu \uD83D\uDDD1️ Odstranění submodulu git submodule deinit cesta/k/submodulu git rm --cached cesta/k/submodulu rm -rf cesta/k/submodulu rm -rf .git/modules/cesta/k/submodulu git commit -m \"Odstraněn submodul\" \uD83D\uDEE0️ Řešení častých problémů \uD83E\uDDE9 Submodul v \"detached HEAD\" stavu cd cesta/k/submodulu git checkout main \uD83D\uDD04 Submodul ukazuje změny i když žádné nemáte git submodule update \uD83D\uDD17 Změna URL submodulu git config --file=.gitmodules submodule.nazev.url NOVA_URL git submodule sync \uD83D\uDCCB Kontrola stavu submodulů git submodule status ⚖️ Výhody & nevýhody submodulů ✅ Výhody Přesná kontrola verzí externích knihoven Možnost přímých úprav závislostí Lepší organizace v komplexních projektech ❌ Nevýhody Vyšší složitost správy Nutnost synchronizace hlavního repozitáře po změnách v submodulech Strmější učící křivka pro nové členy týmu"
  },
  "video/obs.html": {
    "href": "video/obs.html",
    "title": "\uD83D\uDDC2️ OBS Studio – Praktický průvodce & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ OBS Studio – Praktický průvodce & tipy \uD83D\uDE80 Moderní přehled argumentů, příkladů spuštění a doporučení pro práci s OBS Studio. \uD83D\uDCD6 Co je OBS Studio? Open-source software pro nahrávání a streamování videa Umožňuje pokročilou správu scén, zdrojů, zvuku a výstupů Podporuje Windows, macOS, Linux Note OBS je ideální pro tvorbu streamů, záznamů a virtuálních kamer. \uD83D\uDEE0️ Argumenty příkazové řádky \uD83D\uDD39 Přehled argumentů Argument Popis --help, -h Získat seznam dostupných parametrů. --version, -v Získat verzi OBS. --startstreaming Automaticky spustí streamování. --startrecording Automaticky spustí nahrávání. --startvirtualcam Automaticky spustí virtuální kameru. --startreplaybuffer Automaticky spustí Replay Buffer. --collection \"name\" Spustí s danou sbírkou scén. --profile \"name\" Spustí s daným profilem. --scene \"name\" Spustí s danou scénou. --studio-mode Spustí s aktivním režimem Studio. --minimize-to-tray Spustí minimalizováno do systémové lišty. --portable, -p Použijte přenosný režim. --multi, -m Nebude varovat při spuštění více instancí. --always-on-top Spustí v režimu \"vždy nahoře\". --verbose Učiní protokol podrobnějším. --unfiltered_log Zakáže filtr logu (nepotlačuje opakující se řádky). --disable-updater Zakáže vestavěný updater (pouze Windows/macOS). --allow-opengl Povolit OpenGL renderer na Windows. --only-bundled-plugins Spustí pouze s vestavěnými moduly. --safe-mode Spustí v nouzovém režimu, zakáže všechny třetí strany pluginy, skripty a websockety. --disable-shutdown-check Zakáže detekci neuklizeného vypnutí, které by vyvolalo spuštění v nouzovém režimu. --disable-missing-files-check Zakáže dialog o chybějících souborech při spuštění. \uD83D\uDCDD Příklad automatického spuštění nahrávání ⚡ Spuštění OBS s nahráváním (Windows) start /d \"C:\\Program Files\\obs-studio\\bin\\64bit\" obs64.exe --startrecording"
  },
  "virtualization/docker.html": {
    "href": "virtualization/docker.html",
    "title": "\uD83D\uDDC2️ Docker – Praktický průvodce & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ Docker – Praktický průvodce & tipy \uD83D\uDE80 Moderní přehled základních pojmů, příkazů, konfigurace a doporučení pro práci s Dockerem na Windows. \uD83D\uDCD6 Co je Docker? Platforma pro vývoj, doručování a běh aplikací pomocí kontejnerizace Izoluje aplikace v kontejnerech se všemi závislostmi Kontejnery jsou rychlejší a efektivnější než klasická virtualizace Note Pro instalaci Dockeru na Windows je nutné mít nainstalovaný WSL. \uD83E\uDDE9 Základní pojmy \uD83D\uDCE6 Dockerfile Textový soubor s instrukcemi pro vytvoření Docker image. \uD83D\uDDBC️ Docker image Komprimovaná šablona aplikace, knihoven a binárek pro spuštění kontejneru. \uD83D\uDE80 Docker run Příkaz pro spuštění kontejneru z image. \uD83C\uDF10 Docker hub Oficiální úložiště pro sdílení Docker image. \uD83D\uDEE0️ Docker engine Jádro Dockeru, které spravuje kontejnery (klient-server architektura). \uD83E\uDDE9 Docker compose Definice a správa více kontejnerů pomocí souboru `docker-compose.yml`. \uD83D\uDDC3️ Soubory Dockeru dockerd.exe Spouští Docker Daemon, hlavní službu pro správu kontejnerů. docker.exe Klientský nástroj pro ovládání Dockeru (např. `docker run`, `docker ps`). docker-compose.exe Nástroj pro správu více kontejnerů v jedné aplikaci. docker-compose.yml Konfigurační soubor pro definici služeb, obrazů, portů a nastavení kontejnerů. \uD83D\uDEE0️ Základní příkazy \uD83D\uDD0D Zobrazení Zobrazit běžící kontejnery docker ps Zobrazit všechny docker image docker images \uD83D\uDD04 Aktualizace nastavení Zapnout automatické spouštění docker update --restart=yes <container name or id> Vypnout automatické spouštění docker update --restart=no <container name or id> ⬇️ Stažení Stáhnout docker image docker pull <Image name> \uD83D\uDCBE Záloha & obnova Zálohovat image docker save -o <path to tar file> <docker image name or id> Obnovit image docker load -i <path to tar file> \uD83D\uDEE0️ Vytvoření image Sestavit image docker build -t myapp . \uD83D\uDE80 Spuštění kontejneru Spustit služby z docker-compose docker-compose up Spustit kontejner z image docker run kitematic/hello-world-nginx Spustit na jiném portu docker run -p 70:80 kitematic/hello-world-nginx Spustit a smazat po ukončení docker run --rm kitematic/hello-world-nginx Spustit v interaktivním módu docker run -it kitematic/hello-world-nginx \uD83E\uDDE9 Spuštění více kontejnerů Příklad souboru docker-compose.yaml: version: '3.4' services: webapp: image: mcr.microsoft.com/dotnet/core/samples:aspnetapp build: context: . dockerfile: Dockerfile ports: - \"8000:80\" ⏹️ Zastavení & odstranění Zastavit kontejner docker stop <docker container name or id> Odstranit kontejner docker rm <container name or id> Odstranit image docker rmi <docker image name or id> \uD83D\uDCC4 Dockerfile – Příklady .NET Core aplikace FROM mcr.microsoft.com/dotnet/core/runtime:3.1 WORKDIR /app COPY ./publish . ENTRYPOINT [\"dotnet\", \"myapp.dll\"] C# aplikace s buildem FROM mcr.microsoft.com/dotnet/core/sdk:3.1 WORKDIR /app COPY . . RUN dotnet restore RUN dotnet publish -c Release -o out ENTRYPOINT [\"dotnet\", \"out/myapp.dll\"] Lokální NuGet balíčky FROM mcr.microsoft.com/dotnet/core/sdk:3.1 WORKDIR /app COPY . . RUN dotnet restore --source ./nuget RUN dotnet publish -c Release -o out ENTRYPOINT [\"dotnet\", \"out/myapp.dll\"] \uD83D\uDCE6 Volumes & data Propojení složky z Windows s kontejnerem Nastavení Cesta Popis Host/Volume /run/desktop/mnt/host/c/Program Files/Unity/Hub/Editor/6000.0.33f1/Editor Cesta ke složce na hostitelském PC Path in container /app/unity Cesta uvnitř Docker kontejneru Zachování dat z kontejneru na lokálním disku \uD83D\uDEE1️ Řešení problémů Port není dostupný Restartujte službu Windows NAT: net stop winnat net start winnat Note Uvolní zablokované síťové porty pro Docker kontejnery."
  },
  "virtualization/docker_busybox.html": {
    "href": "virtualization/docker_busybox.html",
    "title": "\uD83D\uDDC2️ Docker BusyBox – Praktický průvodce zálohováním volumes | Vývojář",
    "summary": "\uD83D\uDDC2️ Docker BusyBox – Praktický průvodce zálohováním volumes \uD83D\uDE80 Moderní přehled zálohování dat z Docker volumes do lokální složky pomocí BusyBox. \uD83D\uDCD6 Co je BusyBox? Minimalistický Linux image s základními Unix nástroji Ideální pro jednoduché operace v Docker kontejnerech (kopírování, skripty, testování) Note BusyBox je často využíván pro rychlé utility v kontejnerizovaném prostředí. \uD83D\uDEE0️ Krok 1: Zjištění dostupných Docker volumes \uD83D\uDD0D Zobrazit seznam volumes docker volume ls \uD83D\uDEE0️ Krok 2: Záloha dat z Docker volume do počítače \uD83D\uDCE6 Přenesení dat pomocí BusyBox docker run --rm -v projekty_planka_config:/volume -v C:\\Users\\xxx\\Docker_Volumes\\planka:/backup busybox:1.37.0-glibc sh -c \"cp -r /volume/. /backup/\" Note Základní parametry: --rm – automaticky odstraní kontejner po dokončení šetří místo na disku a udržuje systém čistý Připojení volumes: -v projekty_planka_config:/volume – připojí Docker volume jako /volume -v C:\\Users\\xxx\\Docker_Volumes\\planka:/backup – připojí lokální složku jako /backup Použitý image a příkaz: busybox:1.37.0-glibc – minimalistický image s glibc sh -c \"cp -r /volume/. /backup/\" – rekurzivní kopírování obsahu volume do zálohy"
  },
  "virtualization/docker_duplicati.html": {
    "href": "virtualization/docker_duplicati.html",
    "title": "\uD83D\uDDC2️ Docker Duplicati – Praktický průvodce & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ Docker Duplicati – Praktický průvodce & tipy \uD83D\uDE80 Moderní přehled nastavení složek, oprávnění a doporučení pro zálohování s Duplicati v Dockeru. \uD83D\uDCD6 Co je Duplicati? Open-source nástroj pro zálohování dat Umožňuje šifrované, komprimované a inkrementální zálohy Snadná integrace s Dockerem Note Ideální pro automatizované zálohy v kontejnerizovaném prostředí. \uD83D\uDEE0️ Krok 1: Vytvoření a nastavení složky pro zálohy \uD83D\uDCC1 Vytvoření složky mkdir /cesta/k/tvojí/složce \uD83D\uDD12 Nastavení oprávnění Přístup pro všechny: chmod 777 /cesta/k/tvojí/složce Přístup pouze pro root: chmod 700 /cesta/k/tvojí/složce \uD83D\uDEE0️ Krok 2: Nastavení oprávnění pro Docker volumes \uD83D\uDCC2 Rekurzivní nastavení složek a souborů Povolit rekurzivně pro složky: find /docker_XX -type d -exec chmod 755 {} \\; Povolit rekurzivně pro soubory: find /docker_XX -type f -exec chmod 644 {} \\; Popis Cesta Host/volume /var/lib/docker/volumes (cesta k diskům) Path in container /docker_XX (vlastní cesta v kontejneru pro Volume) Important V kontejneru Duplicati musí být typ svazku nastaven na Bind. \uD83D\uDD04 Obnovení výchozích oprávnění Vrácení oprávnění na výchozí hodnoty chown -R root:root /docker_XX Tímto příkazem nastavíte vlastníka a skupinu všech souborů a složek v /docker_XX na root."
  },
  "virtualization/docker_portainer.html": {
    "href": "virtualization/docker_portainer.html",
    "title": "\uD83D\uDDC2️ Portainer – Praktický průvodce & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ Portainer – Praktický průvodce & tipy \uD83D\uDE80 Moderní přehled spuštění, parametrů a doporučení pro práci s Portainerem v Dockeru. \uD83D\uDCD6 Co je Portainer? Webové rozhraní pro správu Docker kontejnerů Umožňuje snadnou správu, monitoring a konfiguraci kontejnerů, image, volume a sítí Podporuje Docker, Docker Swarm, Kubernetes Note Portainer výrazně zjednodušuje správu Docker prostředí. \uD83D\uDEE0️ Spuštění Portaineru \uD83D\uDD39 Krok 1: Spuštění kontejneru docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:2.27.5 Parametr Význam -d Spustí kontejner na pozadí -p 9000:9000 Mapuje port 9000 hostitele na port 9000 v kontejneru --name portainer Pojmenuje kontejner jako \"portainer\" --restart always Automatický restart při chybě nebo restartu hostitele -v /var/run/docker.sock:/var/run/docker.sock Umožňuje Portaineru komunikovat s Docker daemonem -v portainer_data:/data Ukládá data Portaineru do trvalého úložiště (Volume) portainer/portainer-ce:2.27.5 Použitý Docker image Portaineru \uD83C\uDF10 Přístup k Portaineru \uD83D\uDD39 Krok 2: Otevření webového rozhraní Po spuštění kontejneru otevřete prohlížeč a zadejte: http://localhost:9000 Nastavte administrátorské heslo a připojte se k Docker endpointu. \uD83D\uDEE1️ Řešení problémů Port 9000 je obsazený Změňte port v příkazu, např.: docker run -d -p 9100:9000 ... Ověřte, zda není jiný kontejner na stejném portu: docker ps Chyba při připojení k Docker daemonu Ověřte, že Docker běží a máte správně namapovaný docker.sock. Zkontrolujte oprávnění k souboru /var/run/docker.sock."
  },
  "virtualization/kubernetes.html": {
    "href": "virtualization/kubernetes.html",
    "title": "\uD83D\uDDC2️ Kubernetes – Praktický průvodce & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ Kubernetes – Praktický průvodce & tipy \uD83D\uDE80 Moderní přehled základních pojmů, principů a doporučení pro práci s Kubernetes. \uD83D\uDCD6 Co je Kubernetes? Orchestrátor kontejnerů pro automatizované zavádění, správu, škálování a aktualizaci aplikací v kontejnerech. Umožňuje efektivně využívat kapacitu serverů, dynamicky spouštět nové verze služeb a vypínat staré. Klíčový nástroj pro správu microservices architektury. Important Pro práci s Kubernetes je zapotřebí znalost Dockeru. \uD83E\uDDE9 Základní pojmy \uD83D\uDCE6 Kontejner Izolovaná jednotka aplikace s vlastními závislostmi. \uD83D\uDDC3️ Pod Nejmenší nasaditelná jednotka v Kubernetes, může obsahovat jeden nebo více kontejnerů. \uD83D\uDD17 Service Abstrakce pro přístup ke skupině podů, zajišťuje síťovou komunikaci. \uD83D\uDEE0️ Deployment Definuje, jak a kolik podů má běžet, umožňuje automatické aktualizace. \uD83C\uDF10 Cluster Skupina serverů (node), na kterých běží Kubernetes a spravuje kontejnery. \uD83D\uDEE0️ Orchestrátory \uD83D\uDD39 Co dělá orchestrátor? Software nad kontejnerovou sítí, automaticky se stará o zavádění, údržbu a škálování kontejnerizovaných aplikací. Efektivně využívá kapacitu serverů Reaguje na podněty (např. selhání služby) Dynamicky spouští nové verze, vypíná staré Note Manuální správa stovek kontejnerů je nad lidské síly, proto se využívají orchestrátory jako Kubernetes. \uD83D\uDDBC️ Ukázka orchestrátoru Note Orchestrátory usnadnily práci především vývojářům microservices. Microservices: Architektura, kde aplikace je rozdělena na menší, nezávislé služby komunikující přes API."
  },
  "virtualization/wsl.html": {
    "href": "virtualization/wsl.html",
    "title": "\uD83D\uDDC2️ WSL (Windows Subsystem for Linux) – Praktický průvodce & tipy | Vývojář",
    "summary": "\uD83D\uDDC2️ WSL (Windows Subsystem for Linux) – Praktický průvodce & tipy \uD83D\uDE80 Moderní přehled instalace, nastavení a doporučení pro práci s WSL na Windows. \uD83D\uDCD6 Co je WSL? WSL umožňuje instalaci a provoz linuxových distribucí přímo na Windows. Umožňuje spouštět linuxové aplikace bez potřeby virtuálního stroje. Note Ideální pro vývojáře, kteří potřebují Linux nástroje na Windows. \uD83D\uDEE0️ Instalace WSL na Windows \uD83D\uDD39 Krok 1: Povolení virtualizace v BIOS/UEFI Important V BIOSu/UEFI povolte: Podpora CPU virtualizace > - Intel: Intel VT-x AMD: AMD-V nebo SVM Virtualizační technologie > - Intel: VT-d AMD: AMD-Vi Vnořená virtualizace (jen pokud potřebujete virtualizaci uvnitř WSL) Kontrola povolení virtualizace: Stiskněte Ctrl + Shift + Esc Přejděte na záložku Výkon (Performance) Dole najdete Virtualization: Enabled \uD83D\uDD39 Krok 2: Povolení WSL v systému Spusťte PowerShell jako správce Aktivujte WSL: dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart \uD83D\uDD39 Krok 3: Povolení Virtual Machine Platform & WSL 2 Aktivujte platformu pro WSL 2: dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart Important Po povolení funkcí restartujte počítač. \uD83D\uDD39 Krok 4: Stažení aktualizace Linux jádra Stáhněte a nainstalujte poslední aktualizaci jádra. Řeší kompatibilitu s Dockerem a dalšími nástroji. Note Doporučuji vždy instalovat nejnovější verzi jádra. \uD83D\uDD39 Krok 5: Nastavení WSL 2 jako výchozí Nastavte WSL 2 jako výchozí: wsl --set-default-version 2 \uD83D\uDD39 Krok 6: Instalace linuxové distribuce Stáhněte si RootFS (např. Ubuntu) a nainstalujte: wsl --import Ubuntu-22.04 C:\\WSL\\Ubuntu2204 C:\\UbuntuRootFS\\ubuntu-jammy-wsl-amd64-ubuntu22.04lts.rootfs.tar.gz --version 2 Note Ubuntu-22.04 = Název distribuce C:\\WSL\\Ubuntu2204 = Cesta k instalaci C:\\UbuntuRootFS\\... = Cesta k RootFS souboru --version 2 = Použít WSL 2 Ověření instalace: wsl --list Warning Odstranění špatně nainstalované distribuce: wsl --unregister <distro name> Např.: wsl --unregister Ubuntu-22.04"
  }
}